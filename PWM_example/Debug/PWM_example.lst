
PWM_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001874  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .VENEER_Code  00000138  2000000c  10002874  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 Stack         00000404  20000144  00000000  00000144  2**0
                  ALLOC
  3 .data         00000044  20000548  100029ac  00008548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000000c  2000058c  00000448  0000858c  2**2
                  ALLOC
  5 .no_init      00000004  20003ffc  00003eb8  00000144  2**2
                  ALLOC
  6 .debug_aranges 00000658  00000000  00000000  00008590  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ac63  00000000  00000000  00008be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016c9  00000000  00000000  0001384b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000035b6  00000000  00000000  00014f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000147c  00000000  00000000  000184cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00004ae3  00000000  00000000  00019948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000217c  00000000  00000000  0001e42b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000560  00000000  00000000  000205a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .build_attributes 000002fb  00000000  00000000  00020b08  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	48 05 00 20 19 10 00 10 00 00 00 00 99 10 00 10     H.. ............
10001010:	00 04 01 00 00 01 00 00                             ........

10001018 <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001018:	4911      	ldr	r1, [pc, #68]	; (10001060 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101a:	4a12      	ldr	r2, [pc, #72]	; (10001064 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
1000101c:	4b12      	ldr	r3, [pc, #72]	; (10001068 <__copy_data+0x16>)
	bl  __copy_data
1000101e:	f000 f818 	bl	10001052 <__copy_data>

    ldr  r0, =SystemInit
10001022:	4812      	ldr	r0, [pc, #72]	; (1000106c <__copy_data+0x1a>)
    blx  r0
10001024:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001026:	4912      	ldr	r1, [pc, #72]	; (10001070 <__copy_data+0x1e>)
	ldr	r2, =__data_start
10001028:	4a12      	ldr	r2, [pc, #72]	; (10001074 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102a:	4b13      	ldr	r3, [pc, #76]	; (10001078 <__copy_data+0x26>)
	bl  __copy_data
1000102c:	f000 f811 	bl	10001052 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001030:	4912      	ldr	r1, [pc, #72]	; (1000107c <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001032:	4a13      	ldr	r2, [pc, #76]	; (10001080 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001034:	4b13      	ldr	r3, [pc, #76]	; (10001084 <__copy_data+0x32>)
	bl  __copy_data
10001036:	f000 f80c 	bl	10001052 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103a:	4913      	ldr	r1, [pc, #76]	; (10001088 <__copy_data+0x36>)
	ldr	r2, =__bss_end
1000103c:	4a13      	ldr	r2, [pc, #76]	; (1000108c <__copy_data+0x3a>)

	movs	r0, 0
1000103e:	2000      	movs	r0, #0

	subs	r2, r1
10001040:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001042:	dd02      	ble.n	1000104a <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001044:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
10001046:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
10001048:	dcfc      	bgt.n	10001044 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104a:	4811      	ldr	r0, [pc, #68]	; (10001090 <__copy_data+0x3e>)
    blx  r0
1000104c:	4780      	blx	r0
#endif

    ldr  r0, =main
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x42>)
    blx  r0
10001050:	4780      	blx	r0

10001052 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001052:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001054:	dd03      	ble.n	1000105e <__copy_data+0xc>

.L_loop:
	subs	r3, #4
10001056:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
10001058:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105a:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
1000105c:	dcfb      	bgt.n	10001056 <__copy_data+0x4>

.L_loop_done:
	bx  lr
1000105e:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001060:	10002874 	.word	0x10002874
	ldr	r2, =VeneerStart
10001064:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
10001068:	20000144 	.word	0x20000144
	bl  __copy_data

    ldr  r0, =SystemInit
1000106c:	1000109d 	.word	0x1000109d
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001070:	100029ac 	.word	0x100029ac
	ldr	r2, =__data_start
10001074:	20000548 	.word	0x20000548
	ldr	r3, =__data_end
10001078:	2000058c 	.word	0x2000058c
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
1000107c:	100029f0 	.word	0x100029f0
	ldr	r2, =__ram_code_start
10001080:	2000058c 	.word	0x2000058c
	ldr	r3, =__ram_code_end
10001084:	2000058c 	.word	0x2000058c
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
10001088:	2000058c 	.word	0x2000058c
	ldr	r2, =__bss_end
1000108c:	20000598 	.word	0x20000598
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001090:	10002725 	.word	0x10002725
    blx  r0
#endif

    ldr  r0, =main
10001094:	100026a5 	.word	0x100026a5

10001098 <BCCU0_0_IRQHandler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_handler:
    b  .
10001098:	e7fe      	b.n	10001098 <BCCU0_0_IRQHandler>
	...

1000109c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{    
1000109c:	b580      	push	{r7, lr}
1000109e:	af00      	add	r7, sp, #0
  SystemCoreSetup();
100010a0:	f000 f804 	bl	100010ac <SystemCoreSetup>
  SystemCoreClockSetup();
100010a4:	f001 facc 	bl	10002640 <SystemCoreClockSetup>
}
100010a8:	46bd      	mov	sp, r7
100010aa:	bd80      	pop	{r7, pc}

100010ac <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
100010ac:	b580      	push	{r7, lr}
100010ae:	af00      	add	r7, sp, #0
#ifndef USE_DYNAMIC_FLASH_WS
  /* Fix flash wait states to 1 cycle (see DS Addendum) */
  NVM->NVMCONF |= NVM_NVMCONF_WS_Msk;
100010b0:	490a      	ldr	r1, [pc, #40]	; (100010dc <SystemCoreSetup+0x30>)
100010b2:	4b0a      	ldr	r3, [pc, #40]	; (100010dc <SystemCoreSetup+0x30>)
100010b4:	891b      	ldrh	r3, [r3, #8]
100010b6:	b29b      	uxth	r3, r3
100010b8:	2280      	movs	r2, #128	; 0x80
100010ba:	0152      	lsls	r2, r2, #5
100010bc:	4313      	orrs	r3, r2
100010be:	b29b      	uxth	r3, r3
100010c0:	810b      	strh	r3, [r1, #8]
  NVM->CONFIG1 |= NVM_CONFIG1_FIXWS_Msk;
100010c2:	4906      	ldr	r1, [pc, #24]	; (100010dc <SystemCoreSetup+0x30>)
100010c4:	4a05      	ldr	r2, [pc, #20]	; (100010dc <SystemCoreSetup+0x30>)
100010c6:	2348      	movs	r3, #72	; 0x48
100010c8:	5ad3      	ldrh	r3, [r2, r3]
100010ca:	b29b      	uxth	r3, r3
100010cc:	2280      	movs	r2, #128	; 0x80
100010ce:	0112      	lsls	r2, r2, #4
100010d0:	4313      	orrs	r3, r2
100010d2:	b29a      	uxth	r2, r3
100010d4:	2348      	movs	r3, #72	; 0x48
100010d6:	52ca      	strh	r2, [r1, r3]
#endif
}
100010d8:	46bd      	mov	sp, r7
100010da:	bd80      	pop	{r7, pc}
100010dc:	40050000 	.word	0x40050000

100010e0 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
100010e0:	b580      	push	{r7, lr}
100010e2:	af00      	add	r7, sp, #0
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010e4:	4b12      	ldr	r3, [pc, #72]	; (10001130 <SystemCoreClockUpdate+0x50>)
100010e6:	681a      	ldr	r2, [r3, #0]
100010e8:	23ff      	movs	r3, #255	; 0xff
100010ea:	021b      	lsls	r3, r3, #8
100010ec:	4013      	ands	r3, r2
100010ee:	0a1a      	lsrs	r2, r3, #8
100010f0:	4b10      	ldr	r3, [pc, #64]	; (10001134 <SystemCoreClockUpdate+0x54>)
100010f2:	601a      	str	r2, [r3, #0]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010f4:	4b0e      	ldr	r3, [pc, #56]	; (10001130 <SystemCoreClockUpdate+0x50>)
100010f6:	681b      	ldr	r3, [r3, #0]
100010f8:	22ff      	movs	r2, #255	; 0xff
100010fa:	401a      	ands	r2, r3
100010fc:	4b0e      	ldr	r3, [pc, #56]	; (10001138 <SystemCoreClockUpdate+0x58>)
100010fe:	601a      	str	r2, [r3, #0]
  
  if (IDIV != 0)
10001100:	4b0c      	ldr	r3, [pc, #48]	; (10001134 <SystemCoreClockUpdate+0x54>)
10001102:	681b      	ldr	r3, [r3, #0]
10001104:	2b00      	cmp	r3, #0
10001106:	d00e      	beq.n	10001126 <SystemCoreClockUpdate+0x46>
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
10001108:	4b0a      	ldr	r3, [pc, #40]	; (10001134 <SystemCoreClockUpdate+0x54>)
1000110a:	681b      	ldr	r3, [r3, #0]
1000110c:	021a      	lsls	r2, r3, #8
1000110e:	4b0a      	ldr	r3, [pc, #40]	; (10001138 <SystemCoreClockUpdate+0x58>)
10001110:	681b      	ldr	r3, [r3, #0]
10001112:	18d3      	adds	r3, r2, r3
10001114:	4809      	ldr	r0, [pc, #36]	; (1000113c <SystemCoreClockUpdate+0x5c>)
10001116:	1c19      	adds	r1, r3, #0
10001118:	f000 fdbc 	bl	10001c94 <__aeabi_uidiv>
1000111c:	1c03      	adds	r3, r0, #0
1000111e:	005a      	lsls	r2, r3, #1
10001120:	4b07      	ldr	r3, [pc, #28]	; (10001140 <SystemCoreClockUpdate+0x60>)
10001122:	601a      	str	r2, [r3, #0]
10001124:	e002      	b.n	1000112c <SystemCoreClockUpdate+0x4c>
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = DCO1_FREQUENCY >> 1U;
10001126:	4b06      	ldr	r3, [pc, #24]	; (10001140 <SystemCoreClockUpdate+0x60>)
10001128:	4a06      	ldr	r2, [pc, #24]	; (10001144 <SystemCoreClockUpdate+0x64>)
1000112a:	601a      	str	r2, [r3, #0]
  }
}
1000112c:	46bd      	mov	sp, r7
1000112e:	bd80      	pop	{r7, pc}
10001130:	40010300 	.word	0x40010300
10001134:	2000058c 	.word	0x2000058c
10001138:	20000590 	.word	0x20000590
1000113c:	f4240000 	.word	0xf4240000
10001140:	20003ffc 	.word	0x20003ffc
10001144:	01e84800 	.word	0x01e84800

10001148 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001148:	b590      	push	{r4, r7, lr}
1000114a:	b085      	sub	sp, #20
1000114c:	af00      	add	r7, sp, #0
1000114e:	60f8      	str	r0, [r7, #12]
10001150:	607a      	str	r2, [r7, #4]
10001152:	230b      	movs	r3, #11
10001154:	18fb      	adds	r3, r7, r3
10001156:	1c0a      	adds	r2, r1, #0
10001158:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
1000115a:	230b      	movs	r3, #11
1000115c:	18fb      	adds	r3, r7, r3
1000115e:	781b      	ldrb	r3, [r3, #0]
10001160:	089b      	lsrs	r3, r3, #2
10001162:	b2db      	uxtb	r3, r3
10001164:	1c18      	adds	r0, r3, #0
10001166:	230b      	movs	r3, #11
10001168:	18fb      	adds	r3, r7, r3
1000116a:	781b      	ldrb	r3, [r3, #0]
1000116c:	089b      	lsrs	r3, r3, #2
1000116e:	b2db      	uxtb	r3, r3
10001170:	1c1a      	adds	r2, r3, #0
10001172:	68fb      	ldr	r3, [r7, #12]
10001174:	3204      	adds	r2, #4
10001176:	0092      	lsls	r2, r2, #2
10001178:	58d3      	ldr	r3, [r2, r3]
1000117a:	220b      	movs	r2, #11
1000117c:	18ba      	adds	r2, r7, r2
1000117e:	7812      	ldrb	r2, [r2, #0]
10001180:	2103      	movs	r1, #3
10001182:	400a      	ands	r2, r1
10001184:	00d2      	lsls	r2, r2, #3
10001186:	1c11      	adds	r1, r2, #0
10001188:	22f8      	movs	r2, #248	; 0xf8
1000118a:	408a      	lsls	r2, r1
1000118c:	43d2      	mvns	r2, r2
1000118e:	401a      	ands	r2, r3
10001190:	1c11      	adds	r1, r2, #0
10001192:	68fb      	ldr	r3, [r7, #12]
10001194:	1d02      	adds	r2, r0, #4
10001196:	0092      	lsls	r2, r2, #2
10001198:	50d1      	str	r1, [r2, r3]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
1000119a:	68fb      	ldr	r3, [r7, #12]
1000119c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000119e:	220b      	movs	r2, #11
100011a0:	18ba      	adds	r2, r7, r2
100011a2:	7812      	ldrb	r2, [r2, #0]
100011a4:	0052      	lsls	r2, r2, #1
100011a6:	1c11      	adds	r1, r2, #0
100011a8:	2203      	movs	r2, #3
100011aa:	408a      	lsls	r2, r1
100011ac:	43d2      	mvns	r2, r2
100011ae:	401a      	ands	r2, r3
100011b0:	68fb      	ldr	r3, [r7, #12]
100011b2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
100011b4:	230b      	movs	r3, #11
100011b6:	18fb      	adds	r3, r7, r3
100011b8:	781b      	ldrb	r3, [r3, #0]
100011ba:	08db      	lsrs	r3, r3, #3
100011bc:	b2db      	uxtb	r3, r3
100011be:	1c18      	adds	r0, r3, #0
100011c0:	230b      	movs	r3, #11
100011c2:	18fb      	adds	r3, r7, r3
100011c4:	781b      	ldrb	r3, [r3, #0]
100011c6:	08db      	lsrs	r3, r3, #3
100011c8:	b2db      	uxtb	r3, r3
100011ca:	1c1a      	adds	r2, r3, #0
100011cc:	68fb      	ldr	r3, [r7, #12]
100011ce:	3210      	adds	r2, #16
100011d0:	0092      	lsls	r2, r2, #2
100011d2:	58d3      	ldr	r3, [r2, r3]
100011d4:	220b      	movs	r2, #11
100011d6:	18ba      	adds	r2, r7, r2
100011d8:	7812      	ldrb	r2, [r2, #0]
100011da:	2107      	movs	r1, #7
100011dc:	400a      	ands	r2, r1
100011de:	0092      	lsls	r2, r2, #2
100011e0:	1c11      	adds	r1, r2, #0
100011e2:	2204      	movs	r2, #4
100011e4:	408a      	lsls	r2, r1
100011e6:	43d2      	mvns	r2, r2
100011e8:	401a      	ands	r2, r3
100011ea:	1c11      	adds	r1, r2, #0
100011ec:	68fb      	ldr	r3, [r7, #12]
100011ee:	1c02      	adds	r2, r0, #0
100011f0:	3210      	adds	r2, #16
100011f2:	0092      	lsls	r2, r2, #2
100011f4:	50d1      	str	r1, [r2, r3]
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
100011f6:	230b      	movs	r3, #11
100011f8:	18fb      	adds	r3, r7, r3
100011fa:	781b      	ldrb	r3, [r3, #0]
100011fc:	08db      	lsrs	r3, r3, #3
100011fe:	b2db      	uxtb	r3, r3
10001200:	1c18      	adds	r0, r3, #0
10001202:	230b      	movs	r3, #11
10001204:	18fb      	adds	r3, r7, r3
10001206:	781b      	ldrb	r3, [r3, #0]
10001208:	08db      	lsrs	r3, r3, #3
1000120a:	b2db      	uxtb	r3, r3
1000120c:	1c1a      	adds	r2, r3, #0
1000120e:	68fb      	ldr	r3, [r7, #12]
10001210:	3210      	adds	r2, #16
10001212:	0092      	lsls	r2, r2, #2
10001214:	58d2      	ldr	r2, [r2, r3]
10001216:	687b      	ldr	r3, [r7, #4]
10001218:	785b      	ldrb	r3, [r3, #1]
1000121a:	1c1c      	adds	r4, r3, #0
1000121c:	230b      	movs	r3, #11
1000121e:	18fb      	adds	r3, r7, r3
10001220:	781b      	ldrb	r3, [r3, #0]
10001222:	2107      	movs	r1, #7
10001224:	400b      	ands	r3, r1
10001226:	009b      	lsls	r3, r3, #2
10001228:	409c      	lsls	r4, r3
1000122a:	1c23      	adds	r3, r4, #0
1000122c:	431a      	orrs	r2, r3
1000122e:	1c11      	adds	r1, r2, #0
10001230:	68fb      	ldr	r3, [r7, #12]
10001232:	1c02      	adds	r2, r0, #0
10001234:	3210      	adds	r2, #16
10001236:	0092      	lsls	r2, r2, #2
10001238:	50d1      	str	r1, [r2, r3]

  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
1000123a:	68fb      	ldr	r3, [r7, #12]
1000123c:	4a20      	ldr	r2, [pc, #128]	; (100012c0 <XMC_GPIO_Init+0x178>)
1000123e:	4293      	cmp	r3, r2
10001240:	d10b      	bne.n	1000125a <XMC_GPIO_Init+0x112>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001242:	68fb      	ldr	r3, [r7, #12]
10001244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10001246:	220b      	movs	r2, #11
10001248:	18ba      	adds	r2, r7, r2
1000124a:	7812      	ldrb	r2, [r2, #0]
1000124c:	2101      	movs	r1, #1
1000124e:	4091      	lsls	r1, r2
10001250:	1c0a      	adds	r2, r1, #0
10001252:	43d2      	mvns	r2, r2
10001254:	401a      	ands	r2, r3
10001256:	68fb      	ldr	r3, [r7, #12]
10001258:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if ((config->mode & XMC_GPIO_MODE_OE) != 0)
1000125a:	687b      	ldr	r3, [r7, #4]
1000125c:	781b      	ldrb	r3, [r3, #0]
1000125e:	b2db      	uxtb	r3, r3
10001260:	b25b      	sxtb	r3, r3
10001262:	2b00      	cmp	r3, #0
10001264:	da07      	bge.n	10001276 <XMC_GPIO_Init+0x12e>
  {
    /* If output is enabled */

    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
10001266:	687b      	ldr	r3, [r7, #4]
10001268:	685a      	ldr	r2, [r3, #4]
1000126a:	230b      	movs	r3, #11
1000126c:	18fb      	adds	r3, r7, r3
1000126e:	781b      	ldrb	r3, [r3, #0]
10001270:	409a      	lsls	r2, r3
10001272:	68fb      	ldr	r3, [r7, #12]
10001274:	605a      	str	r2, [r3, #4]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
10001276:	230b      	movs	r3, #11
10001278:	18fb      	adds	r3, r7, r3
1000127a:	781b      	ldrb	r3, [r3, #0]
1000127c:	089b      	lsrs	r3, r3, #2
1000127e:	b2db      	uxtb	r3, r3
10001280:	1c18      	adds	r0, r3, #0
10001282:	230b      	movs	r3, #11
10001284:	18fb      	adds	r3, r7, r3
10001286:	781b      	ldrb	r3, [r3, #0]
10001288:	089b      	lsrs	r3, r3, #2
1000128a:	b2db      	uxtb	r3, r3
1000128c:	1c1a      	adds	r2, r3, #0
1000128e:	68fb      	ldr	r3, [r7, #12]
10001290:	3204      	adds	r2, #4
10001292:	0092      	lsls	r2, r2, #2
10001294:	58d2      	ldr	r2, [r2, r3]
10001296:	687b      	ldr	r3, [r7, #4]
10001298:	781b      	ldrb	r3, [r3, #0]
1000129a:	1c1c      	adds	r4, r3, #0
1000129c:	230b      	movs	r3, #11
1000129e:	18fb      	adds	r3, r7, r3
100012a0:	781b      	ldrb	r3, [r3, #0]
100012a2:	2103      	movs	r1, #3
100012a4:	400b      	ands	r3, r1
100012a6:	00db      	lsls	r3, r3, #3
100012a8:	409c      	lsls	r4, r3
100012aa:	1c23      	adds	r3, r4, #0
100012ac:	431a      	orrs	r2, r3
100012ae:	1c11      	adds	r1, r2, #0
100012b0:	68fb      	ldr	r3, [r7, #12]
100012b2:	1d02      	adds	r2, r0, #4
100012b4:	0092      	lsls	r2, r2, #2
100012b6:	50d1      	str	r1, [r2, r3]
}
100012b8:	46bd      	mov	sp, r7
100012ba:	b005      	add	sp, #20
100012bc:	bd90      	pop	{r4, r7, pc}
100012be:	46c0      	nop			; (mov r8, r8)
100012c0:	40040200 	.word	0x40040200

100012c4 <XMC_SCU_LockProtectedBits>:
#endif
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
100012c4:	b580      	push	{r7, lr}
100012c6:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
100012c8:	4b02      	ldr	r3, [pc, #8]	; (100012d4 <XMC_SCU_LockProtectedBits+0x10>)
100012ca:	22c3      	movs	r2, #195	; 0xc3
100012cc:	625a      	str	r2, [r3, #36]	; 0x24
}
100012ce:	46bd      	mov	sp, r7
100012d0:	bd80      	pop	{r7, pc}
100012d2:	46c0      	nop			; (mov r8, r8)
100012d4:	40010000 	.word	0x40010000

100012d8 <XMC_SCU_UnlockProtectedBits>:

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
100012d8:	b580      	push	{r7, lr}
100012da:	af00      	add	r7, sp, #0
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
100012dc:	4b05      	ldr	r3, [pc, #20]	; (100012f4 <XMC_SCU_UnlockProtectedBits+0x1c>)
100012de:	22c0      	movs	r2, #192	; 0xc0
100012e0:	625a      	str	r2, [r3, #36]	; 0x24

  while (((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100012e2:	46c0      	nop			; (mov r8, r8)
100012e4:	4b03      	ldr	r3, [pc, #12]	; (100012f4 <XMC_SCU_UnlockProtectedBits+0x1c>)
100012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100012e8:	2204      	movs	r2, #4
100012ea:	4013      	ands	r3, r2
100012ec:	d1fa      	bne.n	100012e4 <XMC_SCU_UnlockProtectedBits+0xc>
  {
    /* Loop until the lock is removed */
  }
}
100012ee:	46bd      	mov	sp, r7
100012f0:	bd80      	pop	{r7, pc}
100012f2:	46c0      	nop			; (mov r8, r8)
100012f4:	40010000 	.word	0x40010000

100012f8 <XMC_SCU_CLOCK_Init>:
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
100012f8:	b580      	push	{r7, lr}
100012fa:	b082      	sub	sp, #8
100012fc:	af00      	add	r7, sp, #0
100012fe:	6078      	str	r0, [r7, #4]
  /* Remove protection */
  XMC_SCU_UnlockProtectedBits();
10001300:	f7ff ffea 	bl	100012d8 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001304:	4a0c      	ldr	r2, [pc, #48]	; (10001338 <XMC_SCU_CLOCK_Init+0x40>)
10001306:	4b0c      	ldr	r3, [pc, #48]	; (10001338 <XMC_SCU_CLOCK_Init+0x40>)
10001308:	681b      	ldr	r3, [r3, #0]
1000130a:	490c      	ldr	r1, [pc, #48]	; (1000133c <XMC_SCU_CLOCK_Init+0x44>)
1000130c:	4019      	ands	r1, r3
                   config->rtc_src |
1000130e:	687b      	ldr	r3, [r7, #4]
10001310:	689b      	ldr	r3, [r3, #8]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001312:	4319      	orrs	r1, r3
                   config->rtc_src |
                   config->pclk_src;
10001314:	687b      	ldr	r3, [r7, #4]
10001316:	685b      	ldr	r3, [r3, #4]
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001318:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
1000131a:	6013      	str	r3, [r2, #0]
                   config->rtc_src |
                   config->pclk_src;

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();
1000131c:	f7ff ffd2 	bl	100012c4 <XMC_SCU_LockProtectedBits>

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
10001320:	687b      	ldr	r3, [r7, #4]
10001322:	785b      	ldrb	r3, [r3, #1]
10001324:	1c1a      	adds	r2, r3, #0
10001326:	687b      	ldr	r3, [r7, #4]
10001328:	781b      	ldrb	r3, [r3, #0]
1000132a:	1c10      	adds	r0, r2, #0
1000132c:	1c19      	adds	r1, r3, #0
1000132e:	f000 f825 	bl	1000137c <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10001332:	46bd      	mov	sp, r7
10001334:	b002      	add	sp, #8
10001336:	bd80      	pop	{r7, pc}
10001338:	40010300 	.word	0x40010300
1000133c:	fff0ffff 	.word	0xfff0ffff

10001340 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  XMC_SCU_LockProtectedBits();
}

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
10001340:	b580      	push	{r7, lr}
10001342:	b082      	sub	sp, #8
10001344:	af00      	add	r7, sp, #0
10001346:	1c02      	adds	r2, r0, #0
10001348:	1dbb      	adds	r3, r7, #6
1000134a:	801a      	strh	r2, [r3, #0]
  XMC_SCU_UnlockProtectedBits();
1000134c:	f7ff ffc4 	bl	100012d8 <XMC_SCU_UnlockProtectedBits>
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10001350:	4b09      	ldr	r3, [pc, #36]	; (10001378 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001352:	4a09      	ldr	r2, [pc, #36]	; (10001378 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001354:	6911      	ldr	r1, [r2, #16]
10001356:	1dba      	adds	r2, r7, #6
10001358:	8812      	ldrh	r2, [r2, #0]
1000135a:	430a      	orrs	r2, r1
1000135c:	611a      	str	r2, [r3, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000135e:	46c0      	nop			; (mov r8, r8)
10001360:	4b05      	ldr	r3, [pc, #20]	; (10001378 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
10001362:	681a      	ldr	r2, [r3, #0]
10001364:	2380      	movs	r3, #128	; 0x80
10001366:	05db      	lsls	r3, r3, #23
10001368:	4013      	ands	r3, r2
1000136a:	d1f9      	bne.n	10001360 <XMC_SCU_CLOCK_UngatePeripheralClock+0x20>
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
1000136c:	f7ff ffaa 	bl	100012c4 <XMC_SCU_LockProtectedBits>
}
10001370:	46bd      	mov	sp, r7
10001372:	b002      	add	sp, #8
10001374:	bd80      	pop	{r7, pc}
10001376:	46c0      	nop			; (mov r8, r8)
10001378:	40010300 	.word	0x40010300

1000137c <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
1000137c:	b580      	push	{r7, lr}
1000137e:	b084      	sub	sp, #16
10001380:	af00      	add	r7, sp, #0
10001382:	6078      	str	r0, [r7, #4]
10001384:	6039      	str	r1, [r7, #0]
  /* Find out current and target value of idiv */
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();
10001386:	f7ff ffa7 	bl	100012d8 <XMC_SCU_UnlockProtectedBits>

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000138a:	4b21      	ldr	r3, [pc, #132]	; (10001410 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
1000138c:	681a      	ldr	r2, [r3, #0]
1000138e:	23ff      	movs	r3, #255	; 0xff
10001390:	021b      	lsls	r3, r3, #8
10001392:	4013      	ands	r3, r2
10001394:	0a1b      	lsrs	r3, r3, #8
10001396:	60fb      	str	r3, [r7, #12]

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001398:	4b1d      	ldr	r3, [pc, #116]	; (10001410 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
1000139a:	4a1d      	ldr	r2, [pc, #116]	; (10001410 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
1000139c:	6812      	ldr	r2, [r2, #0]
1000139e:	491d      	ldr	r1, [pc, #116]	; (10001414 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x98>)
100013a0:	4011      	ands	r1, r2
100013a2:	683a      	ldr	r2, [r7, #0]
100013a4:	430a      	orrs	r2, r1
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
100013a6:	491c      	ldr	r1, [pc, #112]	; (10001418 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
100013a8:	430a      	orrs	r2, r1

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013aa:	601a      	str	r2, [r3, #0]
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
100013ac:	46c0      	nop			; (mov r8, r8)
100013ae:	4b18      	ldr	r3, [pc, #96]	; (10001410 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100013b0:	681a      	ldr	r2, [r3, #0]
100013b2:	2380      	movs	r3, #128	; 0x80
100013b4:	05db      	lsls	r3, r3, #23
100013b6:	4013      	ands	r3, r2
100013b8:	d1f9      	bne.n	100013ae <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x32>
  {
    /* Spin until the core supply stabilizes */
  }

  if (curr_idiv <= idiv)
100013ba:	68fa      	ldr	r2, [r7, #12]
100013bc:	687b      	ldr	r3, [r7, #4]
100013be:	429a      	cmp	r2, r3
100013c0:	d806      	bhi.n	100013d0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x54>
  {
    /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
    XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
100013c2:	68fa      	ldr	r2, [r7, #12]
100013c4:	687b      	ldr	r3, [r7, #4]
100013c6:	1c10      	adds	r0, r2, #0
100013c8:	1c19      	adds	r1, r3, #0
100013ca:	f000 f853 	bl	10001474 <XMC_SCU_CLOCK_lFrequencyDownScaling>
100013ce:	e005      	b.n	100013dc <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x60>
  }
  else
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
100013d0:	68fa      	ldr	r2, [r7, #12]
100013d2:	687b      	ldr	r3, [r7, #4]
100013d4:	1c10      	adds	r0, r2, #0
100013d6:	1c19      	adds	r1, r3, #0
100013d8:	f000 f822 	bl	10001420 <XMC_SCU_CLOCK_lFrequencyUpScaling>
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013dc:	4b0c      	ldr	r3, [pc, #48]	; (10001410 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100013de:	4a0c      	ldr	r2, [pc, #48]	; (10001410 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100013e0:	6812      	ldr	r2, [r2, #0]
100013e2:	490e      	ldr	r1, [pc, #56]	; (1000141c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa0>)
100013e4:	4011      	ands	r1, r2
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100013e6:	687a      	ldr	r2, [r7, #4]
100013e8:	0212      	lsls	r2, r2, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013ea:	430a      	orrs	r2, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100013ec:	490a      	ldr	r1, [pc, #40]	; (10001418 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x9c>)
100013ee:	430a      	orrs	r2, r1
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100013f0:	601a      	str	r2, [r3, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100013f2:	46c0      	nop			; (mov r8, r8)
100013f4:	4b06      	ldr	r3, [pc, #24]	; (10001410 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x94>)
100013f6:	681a      	ldr	r2, [r3, #0]
100013f8:	2380      	movs	r3, #128	; 0x80
100013fa:	05db      	lsls	r3, r3, #23
100013fc:	4013      	ands	r3, r2
100013fe:	d1f9      	bne.n	100013f4 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x78>
  {
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();
10001400:	f7ff ff60 	bl	100012c4 <XMC_SCU_LockProtectedBits>

  SystemCoreClockUpdate();
10001404:	f7ff fe6c 	bl	100010e0 <SystemCoreClockUpdate>

}
10001408:	46bd      	mov	sp, r7
1000140a:	b004      	add	sp, #16
1000140c:	bd80      	pop	{r7, pc}
1000140e:	46c0      	nop			; (mov r8, r8)
10001410:	40010300 	.word	0x40010300
10001414:	c00fff00 	.word	0xc00fff00
10001418:	3ff00000 	.word	0x3ff00000
1000141c:	c00f00ff 	.word	0xc00f00ff

10001420 <XMC_SCU_CLOCK_lFrequencyUpScaling>:

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001420:	b580      	push	{r7, lr}
10001422:	b082      	sub	sp, #8
10001424:	af00      	add	r7, sp, #0
10001426:	6078      	str	r0, [r7, #4]
10001428:	6039      	str	r1, [r7, #0]
  while (curr_idiv > (target_idiv * 4UL))
1000142a:	e014      	b.n	10001456 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x36>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
1000142c:	687b      	ldr	r3, [r7, #4]
1000142e:	089b      	lsrs	r3, r3, #2
10001430:	607b      	str	r3, [r7, #4]

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001432:	4b0d      	ldr	r3, [pc, #52]	; (10001468 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001434:	4a0c      	ldr	r2, [pc, #48]	; (10001468 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
10001436:	6812      	ldr	r2, [r2, #0]
10001438:	490c      	ldr	r1, [pc, #48]	; (1000146c <XMC_SCU_CLOCK_lFrequencyUpScaling+0x4c>)
1000143a:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000143c:	687a      	ldr	r2, [r7, #4]
1000143e:	0212      	lsls	r2, r2, #8
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001440:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
10001442:	490b      	ldr	r1, [pc, #44]	; (10001470 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x50>)
10001444:	430a      	orrs	r2, r1
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001446:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001448:	46c0      	nop			; (mov r8, r8)
1000144a:	4b07      	ldr	r3, [pc, #28]	; (10001468 <XMC_SCU_CLOCK_lFrequencyUpScaling+0x48>)
1000144c:	681a      	ldr	r2, [r3, #0]
1000144e:	2380      	movs	r3, #128	; 0x80
10001450:	05db      	lsls	r3, r3, #23
10001452:	4013      	ands	r3, r2
10001454:	d1f9      	bne.n	1000144a <XMC_SCU_CLOCK_lFrequencyUpScaling+0x2a>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10001456:	683b      	ldr	r3, [r7, #0]
10001458:	009a      	lsls	r2, r3, #2
1000145a:	687b      	ldr	r3, [r7, #4]
1000145c:	429a      	cmp	r2, r3
1000145e:	d3e5      	bcc.n	1000142c <XMC_SCU_CLOCK_lFrequencyUpScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
10001460:	46bd      	mov	sp, r7
10001462:	b002      	add	sp, #8
10001464:	bd80      	pop	{r7, pc}
10001466:	46c0      	nop			; (mov r8, r8)
10001468:	40010300 	.word	0x40010300
1000146c:	c00f00ff 	.word	0xc00f00ff
10001470:	3ff00000 	.word	0x3ff00000

10001474 <XMC_SCU_CLOCK_lFrequencyDownScaling>:

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
10001474:	b580      	push	{r7, lr}
10001476:	b082      	sub	sp, #8
10001478:	af00      	add	r7, sp, #0
1000147a:	6078      	str	r0, [r7, #4]
1000147c:	6039      	str	r1, [r7, #0]

  while ((curr_idiv * 4UL) < target_idiv)
1000147e:	e019      	b.n	100014b4 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x40>
  {
    if (0U == curr_idiv)
10001480:	687b      	ldr	r3, [r7, #4]
10001482:	2b00      	cmp	r3, #0
10001484:	d101      	bne.n	1000148a <XMC_SCU_CLOCK_lFrequencyDownScaling+0x16>
    {
      curr_idiv = 1U;
10001486:	2301      	movs	r3, #1
10001488:	607b      	str	r3, [r7, #4]
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
1000148a:	687b      	ldr	r3, [r7, #4]
1000148c:	009b      	lsls	r3, r3, #2
1000148e:	607b      	str	r3, [r7, #4]
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001490:	4b0c      	ldr	r3, [pc, #48]	; (100014c4 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001492:	4a0c      	ldr	r2, [pc, #48]	; (100014c4 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
10001494:	6812      	ldr	r2, [r2, #0]
10001496:	490c      	ldr	r1, [pc, #48]	; (100014c8 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x54>)
10001498:	4011      	ands	r1, r2
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
1000149a:	687a      	ldr	r2, [r7, #4]
1000149c:	0212      	lsls	r2, r2, #8
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000149e:	430a      	orrs	r2, r1
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100014a0:	490a      	ldr	r1, [pc, #40]	; (100014cc <XMC_SCU_CLOCK_lFrequencyDownScaling+0x58>)
100014a2:	430a      	orrs	r2, r1
    if (0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100014a4:	601a      	str	r2, [r3, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100014a6:	46c0      	nop			; (mov r8, r8)
100014a8:	4b06      	ldr	r3, [pc, #24]	; (100014c4 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x50>)
100014aa:	681a      	ldr	r2, [r3, #0]
100014ac:	2380      	movs	r3, #128	; 0x80
100014ae:	05db      	lsls	r3, r3, #23
100014b0:	4013      	ands	r3, r2
100014b2:	d1f9      	bne.n	100014a8 <XMC_SCU_CLOCK_lFrequencyDownScaling+0x34>

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
100014b4:	687b      	ldr	r3, [r7, #4]
100014b6:	009a      	lsls	r2, r3, #2
100014b8:	683b      	ldr	r3, [r7, #0]
100014ba:	429a      	cmp	r2, r3
100014bc:	d3e0      	bcc.n	10001480 <XMC_SCU_CLOCK_lFrequencyDownScaling+0xc>
    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
    {
      /* Wait voltage suply stabilization */
    }
  }
}
100014be:	46bd      	mov	sp, r7
100014c0:	b002      	add	sp, #8
100014c2:	bd80      	pop	{r7, pc}
100014c4:	40010300 	.word	0x40010300
100014c8:	c00f00ff 	.word	0xc00f00ff
100014cc:	3ff00000 	.word	0x3ff00000

100014d0 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
100014d0:	b580      	push	{r7, lr}
100014d2:	b082      	sub	sp, #8
100014d4:	af00      	add	r7, sp, #0
100014d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
100014d8:	687b      	ldr	r3, [r7, #4]
100014da:	2280      	movs	r2, #128	; 0x80
100014dc:	0052      	lsls	r2, r2, #1
100014de:	60da      	str	r2, [r3, #12]
}
100014e0:	46bd      	mov	sp, r7
100014e2:	b002      	add	sp, #8
100014e4:	bd80      	pop	{r7, pc}
100014e6:	46c0      	nop			; (mov r8, r8)

100014e8 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
100014e8:	b580      	push	{r7, lr}
100014ea:	b082      	sub	sp, #8
100014ec:	af00      	add	r7, sp, #0
100014ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
100014f0:	687b      	ldr	r3, [r7, #4]
100014f2:	2201      	movs	r2, #1
100014f4:	611a      	str	r2, [r3, #16]
}
100014f6:	46bd      	mov	sp, r7
100014f8:	b002      	add	sp, #8
100014fa:	bd80      	pop	{r7, pc}

100014fc <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
100014fc:	b580      	push	{r7, lr}
100014fe:	b082      	sub	sp, #8
10001500:	af00      	add	r7, sp, #0
10001502:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
10001504:	687a      	ldr	r2, [r7, #4]
10001506:	23a0      	movs	r3, #160	; 0xa0
10001508:	05db      	lsls	r3, r3, #23
1000150a:	429a      	cmp	r2, r3
1000150c:	d102      	bne.n	10001514 <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
1000150e:	2002      	movs	r0, #2
10001510:	f7ff ff16 	bl	10001340 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
10001514:	46bd      	mov	sp, r7
10001516:	b002      	add	sp, #8
10001518:	bd80      	pop	{r7, pc}
1000151a:	46c0      	nop			; (mov r8, r8)

1000151c <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
1000151c:	b580      	push	{r7, lr}
1000151e:	b082      	sub	sp, #8
10001520:	af00      	add	r7, sp, #0
10001522:	6078      	str	r0, [r7, #4]
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
10001524:	687b      	ldr	r3, [r7, #4]
10001526:	1c18      	adds	r0, r3, #0
10001528:	f7ff ffe8 	bl	100014fc <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
#endif
}
1000152c:	46bd      	mov	sp, r7
1000152e:	b002      	add	sp, #8
10001530:	bd80      	pop	{r7, pc}
10001532:	46c0      	nop			; (mov r8, r8)

10001534 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
10001534:	b580      	push	{r7, lr}
10001536:	b084      	sub	sp, #16
10001538:	af00      	add	r7, sp, #0
1000153a:	6078      	str	r0, [r7, #4]
1000153c:	1c0a      	adds	r2, r1, #0
1000153e:	1cfb      	adds	r3, r7, #3
10001540:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
10001542:	687b      	ldr	r3, [r7, #4]
10001544:	1c18      	adds	r0, r3, #0
10001546:	f7ff ffe9 	bl	1000151c <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
1000154a:	687b      	ldr	r3, [r7, #4]
1000154c:	1c18      	adds	r0, r3, #0
1000154e:	f7ff ffbf 	bl	100014d0 <XMC_CCU8_StartPrescaler>

  gctrl = module->GCTRL;
10001552:	687b      	ldr	r3, [r7, #4]
10001554:	681b      	ldr	r3, [r3, #0]
10001556:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
10001558:	68fb      	ldr	r3, [r7, #12]
1000155a:	4a07      	ldr	r2, [pc, #28]	; (10001578 <XMC_CCU8_Init+0x44>)
1000155c:	4013      	ands	r3, r2
1000155e:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
10001560:	1cfb      	adds	r3, r7, #3
10001562:	781b      	ldrb	r3, [r3, #0]
10001564:	039b      	lsls	r3, r3, #14
10001566:	68fa      	ldr	r2, [r7, #12]
10001568:	4313      	orrs	r3, r2
1000156a:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
1000156c:	687b      	ldr	r3, [r7, #4]
1000156e:	68fa      	ldr	r2, [r7, #12]
10001570:	601a      	str	r2, [r3, #0]
}
10001572:	46bd      	mov	sp, r7
10001574:	b004      	add	sp, #16
10001576:	bd80      	pop	{r7, pc}
10001578:	ffff3fff 	.word	0xffff3fff

1000157c <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
1000157c:	b580      	push	{r7, lr}
1000157e:	b082      	sub	sp, #8
10001580:	af00      	add	r7, sp, #0
10001582:	6078      	str	r0, [r7, #4]
10001584:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
10001586:	687b      	ldr	r3, [r7, #4]
10001588:	1c18      	adds	r0, r3, #0
1000158a:	f7ff ffad 	bl	100014e8 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
1000158e:	683b      	ldr	r3, [r7, #0]
10001590:	681a      	ldr	r2, [r3, #0]
10001592:	687b      	ldr	r3, [r7, #4]
10001594:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
10001596:	683b      	ldr	r3, [r7, #0]
10001598:	7b5b      	ldrb	r3, [r3, #13]
1000159a:	06db      	lsls	r3, r3, #27
1000159c:	0fdb      	lsrs	r3, r3, #31
1000159e:	b2db      	uxtb	r3, r3
100015a0:	051a      	lsls	r2, r3, #20
100015a2:	687b      	ldr	r3, [r7, #4]
100015a4:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
100015a6:	683b      	ldr	r3, [r7, #0]
100015a8:	7b1b      	ldrb	r3, [r3, #12]
100015aa:	071b      	lsls	r3, r3, #28
100015ac:	0f1b      	lsrs	r3, r3, #28
100015ae:	b2db      	uxtb	r3, r3
100015b0:	1c1a      	adds	r2, r3, #0
100015b2:	687b      	ldr	r3, [r7, #4]
100015b4:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
100015b6:	683b      	ldr	r3, [r7, #0]
100015b8:	7b1b      	ldrb	r3, [r3, #12]
100015ba:	061b      	lsls	r3, r3, #24
100015bc:	0f1b      	lsrs	r3, r3, #28
100015be:	b2db      	uxtb	r3, r3
100015c0:	1c1a      	adds	r2, r3, #0
100015c2:	687b      	ldr	r3, [r7, #4]
100015c4:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
100015c6:	683b      	ldr	r3, [r7, #0]
100015c8:	7b5b      	ldrb	r3, [r3, #13]
100015ca:	071b      	lsls	r3, r3, #28
100015cc:	0f1b      	lsrs	r3, r3, #28
100015ce:	b2db      	uxtb	r3, r3
100015d0:	1c1a      	adds	r2, r3, #0
100015d2:	687b      	ldr	r3, [r7, #4]
100015d4:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
100015d6:	683b      	ldr	r3, [r7, #0]
100015d8:	685a      	ldr	r2, [r3, #4]
100015da:	687b      	ldr	r3, [r7, #4]
100015dc:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
100015de:	683b      	ldr	r3, [r7, #0]
100015e0:	689b      	ldr	r3, [r3, #8]
100015e2:	2214      	movs	r2, #20
100015e4:	405a      	eors	r2, r3
100015e6:	687b      	ldr	r3, [r7, #4]
100015e8:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
100015ea:	46bd      	mov	sp, r7
100015ec:	b002      	add	sp, #8
100015ee:	bd80      	pop	{r7, pc}

100015f0 <XMC_CCU8_SetMultiChannelShadowTransferMode>:
  slice->CHC = chc;
}

/* API to configure the multichannel shadow transfer request via SW and via the CCU8x.MCSS input. */
void XMC_CCU8_SetMultiChannelShadowTransferMode(XMC_CCU8_MODULE_t *const module, const uint32_t slice_mode_msk)
{
100015f0:	b580      	push	{r7, lr}
100015f2:	b084      	sub	sp, #16
100015f4:	af00      	add	r7, sp, #0
100015f6:	6078      	str	r0, [r7, #4]
100015f8:	6039      	str	r1, [r7, #0]
  uint32_t gctrl;

  XMC_ASSERT("XMC_CCU8_SetMultiChannelShadowTransferMode:Invalid module Pointer", XMC_CCU8_IsValidModule(module));

  gctrl = module->GCTRL;
100015fa:	687b      	ldr	r3, [r7, #4]
100015fc:	681b      	ldr	r3, [r3, #0]
100015fe:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t)slice_mode_msk >> 16U);
10001600:	683b      	ldr	r3, [r7, #0]
10001602:	0c1b      	lsrs	r3, r3, #16
10001604:	43da      	mvns	r2, r3
10001606:	68fb      	ldr	r3, [r7, #12]
10001608:	4013      	ands	r3, r2
1000160a:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t)slice_mode_msk & 0xFFFFU);
1000160c:	683b      	ldr	r3, [r7, #0]
1000160e:	041b      	lsls	r3, r3, #16
10001610:	0c1b      	lsrs	r3, r3, #16
10001612:	68fa      	ldr	r2, [r7, #12]
10001614:	4313      	orrs	r3, r2
10001616:	60fb      	str	r3, [r7, #12]
  module->GCTRL = gctrl;
10001618:	687b      	ldr	r3, [r7, #4]
1000161a:	68fa      	ldr	r2, [r7, #12]
1000161c:	601a      	str	r2, [r3, #0]
}
1000161e:	46bd      	mov	sp, r7
10001620:	b004      	add	sp, #16
10001622:	bd80      	pop	{r7, pc}

10001624 <XMC_CCU8_SLICE_StartConfig>:

/* API to configure the Start trigger function of a slice*/
void XMC_CCU8_SLICE_StartConfig(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_EVENT_t event,
                                const XMC_CCU8_SLICE_START_MODE_t start_mode)
{
10001624:	b580      	push	{r7, lr}
10001626:	b084      	sub	sp, #16
10001628:	af00      	add	r7, sp, #0
1000162a:	6078      	str	r0, [r7, #4]
1000162c:	1c08      	adds	r0, r1, #0
1000162e:	1c11      	adds	r1, r2, #0
10001630:	1cfb      	adds	r3, r7, #3
10001632:	1c02      	adds	r2, r0, #0
10001634:	701a      	strb	r2, [r3, #0]
10001636:	1cbb      	adds	r3, r7, #2
10001638:	1c0a      	adds	r2, r1, #0
1000163a:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StartConfig:Invalid Start Mode",
             ((start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START) || \
              (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)));
  cmc = slice->CMC;
1000163c:	687b      	ldr	r3, [r7, #4]
1000163e:	685b      	ldr	r3, [r3, #4]
10001640:	60bb      	str	r3, [r7, #8]

  cmc &= ~((uint32_t) CCU8_CC8_CMC_STRTS_Msk);
10001642:	68bb      	ldr	r3, [r7, #8]
10001644:	2203      	movs	r2, #3
10001646:	4393      	bics	r3, r2
10001648:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_STRTS_Pos;
1000164a:	1cfb      	adds	r3, r7, #3
1000164c:	781b      	ldrb	r3, [r3, #0]
1000164e:	68ba      	ldr	r2, [r7, #8]
10001650:	4313      	orrs	r3, r2
10001652:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
10001654:	687b      	ldr	r3, [r7, #4]
10001656:	68ba      	ldr	r2, [r7, #8]
10001658:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
1000165a:	687b      	ldr	r3, [r7, #4]
1000165c:	695b      	ldr	r3, [r3, #20]
1000165e:	60fb      	str	r3, [r7, #12]

  if (start_mode == XMC_CCU8_SLICE_START_MODE_TIMER_START_CLEAR)
10001660:	1cbb      	adds	r3, r7, #2
10001662:	781b      	ldrb	r3, [r3, #0]
10001664:	2b01      	cmp	r3, #1
10001666:	d105      	bne.n	10001674 <XMC_CCU8_SLICE_StartConfig+0x50>
  {
    tc |= (uint32_t) CCU8_CC8_TC_STRM_Msk;
10001668:	68fb      	ldr	r3, [r7, #12]
1000166a:	2280      	movs	r2, #128	; 0x80
1000166c:	00d2      	lsls	r2, r2, #3
1000166e:	4313      	orrs	r3, r2
10001670:	60fb      	str	r3, [r7, #12]
10001672:	e003      	b.n	1000167c <XMC_CCU8_SLICE_StartConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_STRM_Msk);
10001674:	68fb      	ldr	r3, [r7, #12]
10001676:	4a04      	ldr	r2, [pc, #16]	; (10001688 <XMC_CCU8_SLICE_StartConfig+0x64>)
10001678:	4013      	ands	r3, r2
1000167a:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
1000167c:	687b      	ldr	r3, [r7, #4]
1000167e:	68fa      	ldr	r2, [r7, #12]
10001680:	615a      	str	r2, [r3, #20]
}
10001682:	46bd      	mov	sp, r7
10001684:	b004      	add	sp, #16
10001686:	bd80      	pop	{r7, pc}
10001688:	fffffbff 	.word	0xfffffbff

1000168c <XMC_CCU8_SLICE_StopConfig>:

/* API to configure the Stop trigger function of a slice */
void XMC_CCU8_SLICE_StopConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_EVENT_t event,
                               const XMC_CCU8_SLICE_END_MODE_t end_mode)
{
1000168c:	b580      	push	{r7, lr}
1000168e:	b084      	sub	sp, #16
10001690:	af00      	add	r7, sp, #0
10001692:	6078      	str	r0, [r7, #4]
10001694:	1c08      	adds	r0, r1, #0
10001696:	1c11      	adds	r1, r2, #0
10001698:	1cfb      	adds	r3, r7, #3
1000169a:	1c02      	adds	r2, r0, #0
1000169c:	701a      	strb	r2, [r3, #0]
1000169e:	1cbb      	adds	r3, r7, #2
100016a0:	1c0a      	adds	r2, r1, #0
100016a2:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));
  XMC_ASSERT("XMC_CCU8_SLICE_StopConfig:Invalid End Mode", XMC_CCU8_SLICE_CHECK_END_MODE(end_mode));

  cmc = slice->CMC;
100016a4:	687b      	ldr	r3, [r7, #4]
100016a6:	685b      	ldr	r3, [r3, #4]
100016a8:	60fb      	str	r3, [r7, #12]
  /* First, Bind the event with the stop function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_ENDS_Msk);
100016aa:	68fb      	ldr	r3, [r7, #12]
100016ac:	220c      	movs	r2, #12
100016ae:	4393      	bics	r3, r2
100016b0:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_ENDS_Pos;
100016b2:	1cfb      	adds	r3, r7, #3
100016b4:	781b      	ldrb	r3, [r3, #0]
100016b6:	009b      	lsls	r3, r3, #2
100016b8:	68fa      	ldr	r2, [r7, #12]
100016ba:	4313      	orrs	r3, r2
100016bc:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100016be:	687b      	ldr	r3, [r7, #4]
100016c0:	68fa      	ldr	r2, [r7, #12]
100016c2:	605a      	str	r2, [r3, #4]

  /* Configure the stop mode */
  tc = slice->TC;
100016c4:	687b      	ldr	r3, [r7, #4]
100016c6:	695b      	ldr	r3, [r3, #20]
100016c8:	60bb      	str	r3, [r7, #8]
  tc &= ~((uint32_t) CCU8_CC8_TC_ENDM_Msk);
100016ca:	68bb      	ldr	r3, [r7, #8]
100016cc:	4a07      	ldr	r2, [pc, #28]	; (100016ec <XMC_CCU8_SLICE_StopConfig+0x60>)
100016ce:	4013      	ands	r3, r2
100016d0:	60bb      	str	r3, [r7, #8]
  tc |= ((uint32_t) end_mode) << CCU8_CC8_TC_ENDM_Pos;
100016d2:	1cbb      	adds	r3, r7, #2
100016d4:	781b      	ldrb	r3, [r3, #0]
100016d6:	021b      	lsls	r3, r3, #8
100016d8:	68ba      	ldr	r2, [r7, #8]
100016da:	4313      	orrs	r3, r2
100016dc:	60bb      	str	r3, [r7, #8]

  slice->TC = tc;
100016de:	687b      	ldr	r3, [r7, #4]
100016e0:	68ba      	ldr	r2, [r7, #8]
100016e2:	615a      	str	r2, [r3, #20]
}
100016e4:	46bd      	mov	sp, r7
100016e6:	b004      	add	sp, #16
100016e8:	bd80      	pop	{r7, pc}
100016ea:	46c0      	nop			; (mov r8, r8)
100016ec:	fffffcff 	.word	0xfffffcff

100016f0 <XMC_CCU8_SLICE_LoadConfig>:

/* API to configure the Load trigger function of a slice*/
void XMC_CCU8_SLICE_LoadConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
100016f0:	b580      	push	{r7, lr}
100016f2:	b084      	sub	sp, #16
100016f4:	af00      	add	r7, sp, #0
100016f6:	6078      	str	r0, [r7, #4]
100016f8:	1c0a      	adds	r2, r1, #0
100016fa:	1cfb      	adds	r3, r7, #3
100016fc:	701a      	strb	r2, [r3, #0]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
100016fe:	687b      	ldr	r3, [r7, #4]
10001700:	685b      	ldr	r3, [r3, #4]
10001702:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_LDS_Msk);
10001704:	68fb      	ldr	r3, [r7, #12]
10001706:	4a07      	ldr	r2, [pc, #28]	; (10001724 <XMC_CCU8_SLICE_LoadConfig+0x34>)
10001708:	4013      	ands	r3, r2
1000170a:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_LDS_Pos;
1000170c:	1cfb      	adds	r3, r7, #3
1000170e:	781b      	ldrb	r3, [r3, #0]
10001710:	031b      	lsls	r3, r3, #12
10001712:	68fa      	ldr	r2, [r7, #12]
10001714:	4313      	orrs	r3, r2
10001716:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001718:	687b      	ldr	r3, [r7, #4]
1000171a:	68fa      	ldr	r2, [r7, #12]
1000171c:	605a      	str	r2, [r3, #4]
}
1000171e:	46bd      	mov	sp, r7
10001720:	b004      	add	sp, #16
10001722:	bd80      	pop	{r7, pc}
10001724:	ffffcfff 	.word	0xffffcfff

10001728 <XMC_CCU8_SLICE_LoadSelector>:

/* API to configure, which compare register value has to be loaded during external load event */
void XMC_CCU8_SLICE_LoadSelector(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_COMPARE_CHANNEL_t ch_num)
{
10001728:	b580      	push	{r7, lr}
1000172a:	b084      	sub	sp, #16
1000172c:	af00      	add	r7, sp, #0
1000172e:	6078      	str	r0, [r7, #4]
10001730:	1c0a      	adds	r2, r1, #0
10001732:	1cfb      	adds	r3, r7, #3
10001734:	701a      	strb	r2, [r3, #0]
  uint32_t tc;

  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_LoadSelector:Invalid Channel number", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(ch_num));

  tc = slice->TC;
10001736:	687b      	ldr	r3, [r7, #4]
10001738:	695b      	ldr	r3, [r3, #20]
1000173a:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the load function */
  tc &= ~((uint32_t) CCU8_CC8_TC_TLS_Msk);
1000173c:	68fb      	ldr	r3, [r7, #12]
1000173e:	2280      	movs	r2, #128	; 0x80
10001740:	4393      	bics	r3, r2
10001742:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)ch_num << CCU8_CC8_TC_TLS_Pos;
10001744:	1cfb      	adds	r3, r7, #3
10001746:	781b      	ldrb	r3, [r3, #0]
10001748:	01db      	lsls	r3, r3, #7
1000174a:	68fa      	ldr	r2, [r7, #12]
1000174c:	4313      	orrs	r3, r2
1000174e:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
10001750:	687b      	ldr	r3, [r7, #4]
10001752:	68fa      	ldr	r2, [r7, #12]
10001754:	615a      	str	r2, [r3, #20]
}
10001756:	46bd      	mov	sp, r7
10001758:	b004      	add	sp, #16
1000175a:	bd80      	pop	{r7, pc}

1000175c <XMC_CCU8_SLICE_ModulationConfig>:
void XMC_CCU8_SLICE_ModulationConfig(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_EVENT_t event,
                                     const XMC_CCU8_SLICE_MODULATION_MODE_t mod_mode,
                                     const XMC_CCU8_SLICE_MODULATION_CHANNEL_t channel,
                                     const bool synch_with_pwm)
{
1000175c:	b590      	push	{r4, r7, lr}
1000175e:	b085      	sub	sp, #20
10001760:	af00      	add	r7, sp, #0
10001762:	6078      	str	r0, [r7, #4]
10001764:	1c0c      	adds	r4, r1, #0
10001766:	1c10      	adds	r0, r2, #0
10001768:	1c19      	adds	r1, r3, #0
1000176a:	1cfb      	adds	r3, r7, #3
1000176c:	1c22      	adds	r2, r4, #0
1000176e:	701a      	strb	r2, [r3, #0]
10001770:	1cbb      	adds	r3, r7, #2
10001772:	1c02      	adds	r2, r0, #0
10001774:	701a      	strb	r2, [r3, #0]
10001776:	1c7b      	adds	r3, r7, #1
10001778:	1c0a      	adds	r2, r1, #0
1000177a:	701a      	strb	r2, [r3, #0]
             XMC_CCU8_SLICE_CHECK_MODULATION_CHANNEL(channel));
  XMC_ASSERT("XMC_CCU8_SLICE_ModulationConfig:Invalid Modulation Mode",
             ((mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_ST_OUT) || \
              (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)));

  cmc = slice->CMC;
1000177c:	687b      	ldr	r3, [r7, #4]
1000177e:	685b      	ldr	r3, [r3, #4]
10001780:	60bb      	str	r3, [r7, #8]

  /* First, Bind the event with the modulation function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_MOS_Msk);
10001782:	68bb      	ldr	r3, [r7, #8]
10001784:	4a1d      	ldr	r2, [pc, #116]	; (100017fc <XMC_CCU8_SLICE_ModulationConfig+0xa0>)
10001786:	4013      	ands	r3, r2
10001788:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_MOS_Pos;
1000178a:	1cfb      	adds	r3, r7, #3
1000178c:	781b      	ldrb	r3, [r3, #0]
1000178e:	049b      	lsls	r3, r3, #18
10001790:	68ba      	ldr	r2, [r7, #8]
10001792:	4313      	orrs	r3, r2
10001794:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
10001796:	687b      	ldr	r3, [r7, #4]
10001798:	68ba      	ldr	r2, [r7, #8]
1000179a:	605a      	str	r2, [r3, #4]

  tc  = slice->TC;
1000179c:	687b      	ldr	r3, [r7, #4]
1000179e:	695b      	ldr	r3, [r3, #20]
100017a0:	60fb      	str	r3, [r7, #12]

  /* Next, Modulation mode */
  if (mod_mode == XMC_CCU8_SLICE_MODULATION_MODE_CLEAR_OUT)
100017a2:	1cbb      	adds	r3, r7, #2
100017a4:	781b      	ldrb	r3, [r3, #0]
100017a6:	2b01      	cmp	r3, #1
100017a8:	d105      	bne.n	100017b6 <XMC_CCU8_SLICE_ModulationConfig+0x5a>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMT_Msk;
100017aa:	68fb      	ldr	r3, [r7, #12]
100017ac:	2280      	movs	r2, #128	; 0x80
100017ae:	0452      	lsls	r2, r2, #17
100017b0:	4313      	orrs	r3, r2
100017b2:	60fb      	str	r3, [r7, #12]
100017b4:	e003      	b.n	100017be <XMC_CCU8_SLICE_ModulationConfig+0x62>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMT_Msk);
100017b6:	68fb      	ldr	r3, [r7, #12]
100017b8:	4a11      	ldr	r2, [pc, #68]	; (10001800 <XMC_CCU8_SLICE_ModulationConfig+0xa4>)
100017ba:	4013      	ands	r3, r2
100017bc:	60fb      	str	r3, [r7, #12]
  }

  /* Synchronization of modulation effect with PWM cycle */
  if (synch_with_pwm == true)
100017be:	2320      	movs	r3, #32
100017c0:	18fb      	adds	r3, r7, r3
100017c2:	781b      	ldrb	r3, [r3, #0]
100017c4:	2b00      	cmp	r3, #0
100017c6:	d005      	beq.n	100017d4 <XMC_CCU8_SLICE_ModulationConfig+0x78>
  {
    tc |= (uint32_t) CCU8_CC8_TC_EMS_Msk;
100017c8:	68fb      	ldr	r3, [r7, #12]
100017ca:	2280      	movs	r2, #128	; 0x80
100017cc:	0412      	lsls	r2, r2, #16
100017ce:	4313      	orrs	r3, r2
100017d0:	60fb      	str	r3, [r7, #12]
100017d2:	e003      	b.n	100017dc <XMC_CCU8_SLICE_ModulationConfig+0x80>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_EMS_Msk);
100017d4:	68fb      	ldr	r3, [r7, #12]
100017d6:	4a0b      	ldr	r2, [pc, #44]	; (10001804 <XMC_CCU8_SLICE_ModulationConfig+0xa8>)
100017d8:	4013      	ands	r3, r2
100017da:	60fb      	str	r3, [r7, #12]
  }

  /* Configure on which channel external modulation to be applied */
  tc &= ~((uint32_t) CCU8_CC8_TC_EME_Msk);
100017dc:	68fb      	ldr	r3, [r7, #12]
100017de:	4a0a      	ldr	r2, [pc, #40]	; (10001808 <XMC_CCU8_SLICE_ModulationConfig+0xac>)
100017e0:	4013      	ands	r3, r2
100017e2:	60fb      	str	r3, [r7, #12]
  tc |= (uint32_t)channel << CCU8_CC8_TC_EME_Pos;
100017e4:	1c7b      	adds	r3, r7, #1
100017e6:	781b      	ldrb	r3, [r3, #0]
100017e8:	06db      	lsls	r3, r3, #27
100017ea:	68fa      	ldr	r2, [r7, #12]
100017ec:	4313      	orrs	r3, r2
100017ee:	60fb      	str	r3, [r7, #12]

  slice->TC = tc;
100017f0:	687b      	ldr	r3, [r7, #4]
100017f2:	68fa      	ldr	r2, [r7, #12]
100017f4:	615a      	str	r2, [r3, #20]
}
100017f6:	46bd      	mov	sp, r7
100017f8:	b005      	add	sp, #20
100017fa:	bd90      	pop	{r4, r7, pc}
100017fc:	fff3ffff 	.word	0xfff3ffff
10001800:	feffffff 	.word	0xfeffffff
10001804:	ff7fffff 	.word	0xff7fffff
10001808:	e7ffffff 	.word	0xe7ffffff

1000180c <XMC_CCU8_SLICE_CountConfig>:

/* API to configure the slice count function */
void XMC_CCU8_SLICE_CountConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
1000180c:	b580      	push	{r7, lr}
1000180e:	b084      	sub	sp, #16
10001810:	af00      	add	r7, sp, #0
10001812:	6078      	str	r0, [r7, #4]
10001814:	1c0a      	adds	r2, r1, #0
10001816:	1cfb      	adds	r3, r7, #3
10001818:	701a      	strb	r2, [r3, #0]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CountConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
1000181a:	687b      	ldr	r3, [r7, #4]
1000181c:	685b      	ldr	r3, [r3, #4]
1000181e:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the count function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_CNTS_Msk);
10001820:	68fb      	ldr	r3, [r7, #12]
10001822:	4a07      	ldr	r2, [pc, #28]	; (10001840 <XMC_CCU8_SLICE_CountConfig+0x34>)
10001824:	4013      	ands	r3, r2
10001826:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_CNTS_Pos;
10001828:	1cfb      	adds	r3, r7, #3
1000182a:	781b      	ldrb	r3, [r3, #0]
1000182c:	039b      	lsls	r3, r3, #14
1000182e:	68fa      	ldr	r2, [r7, #12]
10001830:	4313      	orrs	r3, r2
10001832:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
10001834:	687b      	ldr	r3, [r7, #4]
10001836:	68fa      	ldr	r2, [r7, #12]
10001838:	605a      	str	r2, [r3, #4]
}
1000183a:	46bd      	mov	sp, r7
1000183c:	b004      	add	sp, #16
1000183e:	bd80      	pop	{r7, pc}
10001840:	ffff3fff 	.word	0xffff3fff

10001844 <XMC_CCU8_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU8_SLICE_GateConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
10001844:	b580      	push	{r7, lr}
10001846:	b084      	sub	sp, #16
10001848:	af00      	add	r7, sp, #0
1000184a:	6078      	str	r0, [r7, #4]
1000184c:	1c0a      	adds	r2, r1, #0
1000184e:	1cfb      	adds	r3, r7, #3
10001850:	701a      	strb	r2, [r3, #0]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GateConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
10001852:	687b      	ldr	r3, [r7, #4]
10001854:	685b      	ldr	r3, [r3, #4]
10001856:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the gate function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_GATES_Msk);
10001858:	68fb      	ldr	r3, [r7, #12]
1000185a:	4a07      	ldr	r2, [pc, #28]	; (10001878 <XMC_CCU8_SLICE_GateConfig+0x34>)
1000185c:	4013      	ands	r3, r2
1000185e:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_GATES_Pos;
10001860:	1cfb      	adds	r3, r7, #3
10001862:	781b      	ldrb	r3, [r3, #0]
10001864:	021b      	lsls	r3, r3, #8
10001866:	68fa      	ldr	r2, [r7, #12]
10001868:	4313      	orrs	r3, r2
1000186a:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
1000186c:	687b      	ldr	r3, [r7, #4]
1000186e:	68fa      	ldr	r2, [r7, #12]
10001870:	605a      	str	r2, [r3, #4]
}
10001872:	46bd      	mov	sp, r7
10001874:	b004      	add	sp, #16
10001876:	bd80      	pop	{r7, pc}
10001878:	fffffcff 	.word	0xfffffcff

1000187c <XMC_CCU8_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU8_SLICE_DirectionConfig(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_EVENT_t event)
{
1000187c:	b580      	push	{r7, lr}
1000187e:	b084      	sub	sp, #16
10001880:	af00      	add	r7, sp, #0
10001882:	6078      	str	r0, [r7, #4]
10001884:	1c0a      	adds	r2, r1, #0
10001886:	1cfb      	adds	r3, r7, #3
10001888:	701a      	strb	r2, [r3, #0]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU8_SLICE_CHECK_EVENT_ID(event));

  cmc = slice->CMC;
1000188a:	687b      	ldr	r3, [r7, #4]
1000188c:	685b      	ldr	r3, [r3, #4]
1000188e:	60fb      	str	r3, [r7, #12]

  /* First, Bind the event with the direction function */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_UDS_Msk);
10001890:	68fb      	ldr	r3, [r7, #12]
10001892:	4a07      	ldr	r2, [pc, #28]	; (100018b0 <XMC_CCU8_SLICE_DirectionConfig+0x34>)
10001894:	4013      	ands	r3, r2
10001896:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU8_CC8_CMC_UDS_Pos;
10001898:	1cfb      	adds	r3, r7, #3
1000189a:	781b      	ldrb	r3, [r3, #0]
1000189c:	029b      	lsls	r3, r3, #10
1000189e:	68fa      	ldr	r2, [r7, #12]
100018a0:	4313      	orrs	r3, r2
100018a2:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100018a4:	687b      	ldr	r3, [r7, #4]
100018a6:	68fa      	ldr	r2, [r7, #12]
100018a8:	605a      	str	r2, [r3, #4]
}
100018aa:	46bd      	mov	sp, r7
100018ac:	b004      	add	sp, #16
100018ae:	bd80      	pop	{r7, pc}
100018b0:	fffff3ff 	.word	0xfffff3ff

100018b4 <XMC_CCU8_SLICE_StatusBitOverrideConfig>:

/* API to configure slice status bit override function */
void XMC_CCU8_SLICE_StatusBitOverrideConfig(XMC_CCU8_SLICE_t *const slice)
{
100018b4:	b580      	push	{r7, lr}
100018b6:	b084      	sub	sp, #16
100018b8:	af00      	add	r7, sp, #0
100018ba:	6078      	str	r0, [r7, #4]
  uint32_t cmc;

  XMC_ASSERT("XMC_CCU8_SLICE_StatusBitOverrideConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  cmc = slice->CMC;
100018bc:	687b      	ldr	r3, [r7, #4]
100018be:	685b      	ldr	r3, [r3, #4]
100018c0:	60fb      	str	r3, [r7, #12]

  /* Map status bit trigger override to Event 1 &
         status bit value override to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_OFS_Msk);
100018c2:	68fb      	ldr	r3, [r7, #12]
100018c4:	4a06      	ldr	r2, [pc, #24]	; (100018e0 <XMC_CCU8_SLICE_StatusBitOverrideConfig+0x2c>)
100018c6:	4013      	ands	r3, r2
100018c8:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_OFS_Pos;
100018ca:	68fb      	ldr	r3, [r7, #12]
100018cc:	2280      	movs	r2, #128	; 0x80
100018ce:	0252      	lsls	r2, r2, #9
100018d0:	4313      	orrs	r3, r2
100018d2:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
100018d4:	687b      	ldr	r3, [r7, #4]
100018d6:	68fa      	ldr	r2, [r7, #12]
100018d8:	605a      	str	r2, [r3, #4]
}
100018da:	46bd      	mov	sp, r7
100018dc:	b004      	add	sp, #16
100018de:	bd80      	pop	{r7, pc}
100018e0:	fffeffff 	.word	0xfffeffff

100018e4 <XMC_CCU8_SLICE_TrapConfig>:

/* API to configure trap function*/
void XMC_CCU8_SLICE_TrapConfig(XMC_CCU8_SLICE_t *const slice,
                               const XMC_CCU8_SLICE_TRAP_EXIT_MODE_t exit_mode,
                               const bool synch_with_pwm)
{
100018e4:	b580      	push	{r7, lr}
100018e6:	b084      	sub	sp, #16
100018e8:	af00      	add	r7, sp, #0
100018ea:	6078      	str	r0, [r7, #4]
100018ec:	1c08      	adds	r0, r1, #0
100018ee:	1c11      	adds	r1, r2, #0
100018f0:	1cfb      	adds	r3, r7, #3
100018f2:	1c02      	adds	r2, r0, #0
100018f4:	701a      	strb	r2, [r3, #0]
100018f6:	1cbb      	adds	r3, r7, #2
100018f8:	1c0a      	adds	r2, r1, #0
100018fa:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_TrapConfig:Invalid Exit Mode", ((exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_AUTOMATIC) || \
             (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)));

  cmc = slice->CMC;
100018fc:	687b      	ldr	r3, [r7, #4]
100018fe:	685b      	ldr	r3, [r3, #4]
10001900:	60bb      	str	r3, [r7, #8]

  /* Map trap function to Event 2 */
  cmc &= ~((uint32_t) CCU8_CC8_CMC_TS_Msk);
10001902:	68bb      	ldr	r3, [r7, #8]
10001904:	4a17      	ldr	r2, [pc, #92]	; (10001964 <XMC_CCU8_SLICE_TrapConfig+0x80>)
10001906:	4013      	ands	r3, r2
10001908:	60bb      	str	r3, [r7, #8]
  cmc |= ((uint32_t) 1) << CCU8_CC8_CMC_TS_Pos;
1000190a:	68bb      	ldr	r3, [r7, #8]
1000190c:	2280      	movs	r2, #128	; 0x80
1000190e:	0292      	lsls	r2, r2, #10
10001910:	4313      	orrs	r3, r2
10001912:	60bb      	str	r3, [r7, #8]

  slice->CMC = cmc;
10001914:	687b      	ldr	r3, [r7, #4]
10001916:	68ba      	ldr	r2, [r7, #8]
10001918:	605a      	str	r2, [r3, #4]

  tc = slice->TC;
1000191a:	687b      	ldr	r3, [r7, #4]
1000191c:	695b      	ldr	r3, [r3, #20]
1000191e:	60fb      	str	r3, [r7, #12]

  /* Configure synchronization option */
  if (synch_with_pwm == true)
10001920:	1cbb      	adds	r3, r7, #2
10001922:	781b      	ldrb	r3, [r3, #0]
10001924:	2b00      	cmp	r3, #0
10001926:	d005      	beq.n	10001934 <XMC_CCU8_SLICE_TrapConfig+0x50>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSE_Msk;
10001928:	68fb      	ldr	r3, [r7, #12]
1000192a:	2280      	movs	r2, #128	; 0x80
1000192c:	0392      	lsls	r2, r2, #14
1000192e:	4313      	orrs	r3, r2
10001930:	60fb      	str	r3, [r7, #12]
10001932:	e003      	b.n	1000193c <XMC_CCU8_SLICE_TrapConfig+0x58>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSE_Msk);
10001934:	68fb      	ldr	r3, [r7, #12]
10001936:	4a0c      	ldr	r2, [pc, #48]	; (10001968 <XMC_CCU8_SLICE_TrapConfig+0x84>)
10001938:	4013      	ands	r3, r2
1000193a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure exit mode */
  if (exit_mode == XMC_CCU8_SLICE_TRAP_EXIT_MODE_SW)
1000193c:	1cfb      	adds	r3, r7, #3
1000193e:	781b      	ldrb	r3, [r3, #0]
10001940:	2b01      	cmp	r3, #1
10001942:	d105      	bne.n	10001950 <XMC_CCU8_SLICE_TrapConfig+0x6c>
  {
    tc |= (uint32_t) CCU8_CC8_TC_TRPSW_Msk;
10001944:	68fb      	ldr	r3, [r7, #12]
10001946:	2280      	movs	r2, #128	; 0x80
10001948:	03d2      	lsls	r2, r2, #15
1000194a:	4313      	orrs	r3, r2
1000194c:	60fb      	str	r3, [r7, #12]
1000194e:	e003      	b.n	10001958 <XMC_CCU8_SLICE_TrapConfig+0x74>
  }
  else
  {
    tc &= ~((uint32_t) CCU8_CC8_TC_TRPSW_Msk);
10001950:	68fb      	ldr	r3, [r7, #12]
10001952:	4a06      	ldr	r2, [pc, #24]	; (1000196c <XMC_CCU8_SLICE_TrapConfig+0x88>)
10001954:	4013      	ands	r3, r2
10001956:	60fb      	str	r3, [r7, #12]
  }

  slice->TC = tc;
10001958:	687b      	ldr	r3, [r7, #4]
1000195a:	68fa      	ldr	r2, [r7, #12]
1000195c:	615a      	str	r2, [r3, #20]
}
1000195e:	46bd      	mov	sp, r7
10001960:	b004      	add	sp, #16
10001962:	bd80      	pop	{r7, pc}
10001964:	fffdffff 	.word	0xfffdffff
10001968:	ffdfffff 	.word	0xffdfffff
1000196c:	ffbfffff 	.word	0xffbfffff

10001970 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>:

/* API to configure a slice Status Bit Override event */
void XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev1_config,
    const XMC_CCU8_SLICE_EVENT_CONFIG_t *const ev2_config)
{
10001970:	b580      	push	{r7, lr}
10001972:	b086      	sub	sp, #24
10001974:	af00      	add	r7, sp, #0
10001976:	60f8      	str	r0, [r7, #12]
10001978:	60b9      	str	r1, [r7, #8]
1000197a:	607a      	str	r2, [r7, #4]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS1_EV2IS_Pos);
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS1_EV2IS_Pos;

  slice->INS1 = ins;
#else
  ins = slice->INS;
1000197c:	68fb      	ldr	r3, [r7, #12]
1000197e:	681b      	ldr	r3, [r3, #0]
10001980:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV1EM_Pos);
10001982:	697b      	ldr	r3, [r7, #20]
10001984:	4a2a      	ldr	r2, [pc, #168]	; (10001a30 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xc0>)
10001986:	4013      	ands	r3, r2
10001988:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->edge) << CCU8_CC8_INS_EV1EM_Pos;
1000198a:	68bb      	ldr	r3, [r7, #8]
1000198c:	785b      	ldrb	r3, [r3, #1]
1000198e:	049b      	lsls	r3, r3, #18
10001990:	697a      	ldr	r2, [r7, #20]
10001992:	4313      	orrs	r3, r2
10001994:	617b      	str	r3, [r7, #20]

  /* Configure the edge sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << CCU8_CC8_INS_EV2EM_Pos);
10001996:	697b      	ldr	r3, [r7, #20]
10001998:	4a26      	ldr	r2, [pc, #152]	; (10001a34 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xc4>)
1000199a:	4013      	ands	r3, r2
1000199c:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->edge) << CCU8_CC8_INS_EV2EM_Pos;
1000199e:	687b      	ldr	r3, [r7, #4]
100019a0:	785b      	ldrb	r3, [r3, #1]
100019a2:	051b      	lsls	r3, r3, #20
100019a4:	697a      	ldr	r2, [r7, #20]
100019a6:	4313      	orrs	r3, r2
100019a8:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV1LM_Pos);
100019aa:	697b      	ldr	r3, [r7, #20]
100019ac:	4a22      	ldr	r2, [pc, #136]	; (10001a38 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xc8>)
100019ae:	4013      	ands	r3, r2
100019b0:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->level) << CCU8_CC8_INS_EV1LM_Pos;
100019b2:	68bb      	ldr	r3, [r7, #8]
100019b4:	789b      	ldrb	r3, [r3, #2]
100019b6:	05db      	lsls	r3, r3, #23
100019b8:	697a      	ldr	r2, [r7, #20]
100019ba:	4313      	orrs	r3, r2
100019bc:	617b      	str	r3, [r7, #20]

  /* Configure the level sensitivity for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << CCU8_CC8_INS_EV2LM_Pos);
100019be:	697b      	ldr	r3, [r7, #20]
100019c0:	4a1e      	ldr	r2, [pc, #120]	; (10001a3c <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xcc>)
100019c2:	4013      	ands	r3, r2
100019c4:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->level) << CCU8_CC8_INS_EV2LM_Pos;
100019c6:	687b      	ldr	r3, [r7, #4]
100019c8:	789b      	ldrb	r3, [r3, #2]
100019ca:	061b      	lsls	r3, r3, #24
100019cc:	697a      	ldr	r2, [r7, #20]
100019ce:	4313      	orrs	r3, r2
100019d0:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF1M_Pos);
100019d2:	697b      	ldr	r3, [r7, #20]
100019d4:	4a1a      	ldr	r2, [pc, #104]	; (10001a40 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xd0>)
100019d6:	4013      	ands	r3, r2
100019d8:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->duration) << CCU8_CC8_INS_LPF1M_Pos;
100019da:	68bb      	ldr	r3, [r7, #8]
100019dc:	78db      	ldrb	r3, [r3, #3]
100019de:	06db      	lsls	r3, r3, #27
100019e0:	697a      	ldr	r2, [r7, #20]
100019e2:	4313      	orrs	r3, r2
100019e4:	617b      	str	r3, [r7, #20]

  /* Configure the debounce filter for event 2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << CCU8_CC8_INS_LPF2M_Pos);
100019e6:	697b      	ldr	r3, [r7, #20]
100019e8:	4a16      	ldr	r2, [pc, #88]	; (10001a44 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xd4>)
100019ea:	4013      	ands	r3, r2
100019ec:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->duration) << CCU8_CC8_INS_LPF2M_Pos;
100019ee:	687b      	ldr	r3, [r7, #4]
100019f0:	78db      	ldrb	r3, [r3, #3]
100019f2:	075b      	lsls	r3, r3, #29
100019f4:	697a      	ldr	r2, [r7, #20]
100019f6:	4313      	orrs	r3, r2
100019f8:	617b      	str	r3, [r7, #20]

  /* Next, the input for Event1 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV1IS_Pos);
100019fa:	697b      	ldr	r3, [r7, #20]
100019fc:	22f0      	movs	r2, #240	; 0xf0
100019fe:	4393      	bics	r3, r2
10001a00:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev1_config->mapped_input) << CCU8_CC8_INS_EV1IS_Pos;
10001a02:	68bb      	ldr	r3, [r7, #8]
10001a04:	781b      	ldrb	r3, [r3, #0]
10001a06:	011b      	lsls	r3, r3, #4
10001a08:	697a      	ldr	r2, [r7, #20]
10001a0a:	4313      	orrs	r3, r2
10001a0c:	617b      	str	r3, [r7, #20]

  /* Finally, the input for Event2 */
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << CCU8_CC8_INS_EV2IS_Pos);
10001a0e:	697b      	ldr	r3, [r7, #20]
10001a10:	4a0d      	ldr	r2, [pc, #52]	; (10001a48 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent+0xd8>)
10001a12:	4013      	ands	r3, r2
10001a14:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) ev2_config->mapped_input) << CCU8_CC8_INS_EV2IS_Pos;
10001a16:	687b      	ldr	r3, [r7, #4]
10001a18:	781b      	ldrb	r3, [r3, #0]
10001a1a:	021b      	lsls	r3, r3, #8
10001a1c:	697a      	ldr	r2, [r7, #20]
10001a1e:	4313      	orrs	r3, r2
10001a20:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
10001a22:	68fb      	ldr	r3, [r7, #12]
10001a24:	697a      	ldr	r2, [r7, #20]
10001a26:	601a      	str	r2, [r3, #0]
#endif
}
10001a28:	46bd      	mov	sp, r7
10001a2a:	b006      	add	sp, #24
10001a2c:	bd80      	pop	{r7, pc}
10001a2e:	46c0      	nop			; (mov r8, r8)
10001a30:	fff3ffff 	.word	0xfff3ffff
10001a34:	ffcfffff 	.word	0xffcfffff
10001a38:	ff7fffff 	.word	0xff7fffff
10001a3c:	feffffff 	.word	0xfeffffff
10001a40:	e7ffffff 	.word	0xe7ffffff
10001a44:	9fffffff 	.word	0x9fffffff
10001a48:	fffff0ff 	.word	0xfffff0ff

10001a4c <XMC_CCU8_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU8_SLICE_ConfigureEvent(XMC_CCU8_SLICE_t *const slice,
                                   const XMC_CCU8_SLICE_EVENT_t event,
                                   const XMC_CCU8_SLICE_EVENT_CONFIG_t *const config)
{
10001a4c:	b580      	push	{r7, lr}
10001a4e:	b088      	sub	sp, #32
10001a50:	af00      	add	r7, sp, #0
10001a52:	60f8      	str	r0, [r7, #12]
10001a54:	607a      	str	r2, [r7, #4]
10001a56:	230b      	movs	r3, #11
10001a58:	18fb      	adds	r3, r7, r3
10001a5a:	1c0a      	adds	r2, r1, #0
10001a5c:	701a      	strb	r2, [r3, #0]
              (config->level == XMC_CCU8_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureEvent:Invalid Debounce Period",
             XMC_CCU8_SLICE_CHECK_EVENT_FILTER(config->duration));

  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
10001a5e:	231f      	movs	r3, #31
10001a60:	18fb      	adds	r3, r7, r3
10001a62:	220b      	movs	r2, #11
10001a64:	18ba      	adds	r2, r7, r2
10001a66:	7812      	ldrb	r2, [r2, #0]
10001a68:	3a01      	subs	r2, #1
10001a6a:	701a      	strb	r2, [r3, #0]
  ins |= ((uint32_t) config->mapped_input) << pos;

  slice->INS1 = ins;

#else
  ins = slice->INS;
10001a6c:	68fb      	ldr	r3, [r7, #12]
10001a6e:	681b      	ldr	r3, [r3, #0]
10001a70:	61bb      	str	r3, [r7, #24]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU8_CC8_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
10001a72:	231f      	movs	r3, #31
10001a74:	18fb      	adds	r3, r7, r3
10001a76:	781b      	ldrb	r3, [r3, #0]
10001a78:	18db      	adds	r3, r3, r3
10001a7a:	b2da      	uxtb	r2, r3
10001a7c:	2317      	movs	r3, #23
10001a7e:	18fb      	adds	r3, r7, r3
10001a80:	3210      	adds	r2, #16
10001a82:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
10001a84:	2317      	movs	r3, #23
10001a86:	18fb      	adds	r3, r7, r3
10001a88:	781b      	ldrb	r3, [r3, #0]
10001a8a:	2203      	movs	r2, #3
10001a8c:	409a      	lsls	r2, r3
10001a8e:	1c13      	adds	r3, r2, #0
10001a90:	43da      	mvns	r2, r3
10001a92:	69bb      	ldr	r3, [r7, #24]
10001a94:	4013      	ands	r3, r2
10001a96:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->edge) << pos;
10001a98:	687b      	ldr	r3, [r7, #4]
10001a9a:	785b      	ldrb	r3, [r3, #1]
10001a9c:	1c1a      	adds	r2, r3, #0
10001a9e:	2317      	movs	r3, #23
10001aa0:	18fb      	adds	r3, r7, r3
10001aa2:	781b      	ldrb	r3, [r3, #0]
10001aa4:	409a      	lsls	r2, r3
10001aa6:	1c13      	adds	r3, r2, #0
10001aa8:	69ba      	ldr	r2, [r7, #24]
10001aaa:	4313      	orrs	r3, r2
10001aac:	61bb      	str	r3, [r7, #24]

  /* Next, the level */
  pos = ((uint8_t) CCU8_CC8_INS_EV0LM_Pos) + offset;
10001aae:	2317      	movs	r3, #23
10001ab0:	18fb      	adds	r3, r7, r3
10001ab2:	221f      	movs	r2, #31
10001ab4:	18ba      	adds	r2, r7, r2
10001ab6:	7812      	ldrb	r2, [r2, #0]
10001ab8:	3216      	adds	r2, #22
10001aba:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
10001abc:	2317      	movs	r3, #23
10001abe:	18fb      	adds	r3, r7, r3
10001ac0:	781b      	ldrb	r3, [r3, #0]
10001ac2:	2201      	movs	r2, #1
10001ac4:	409a      	lsls	r2, r3
10001ac6:	1c13      	adds	r3, r2, #0
10001ac8:	43da      	mvns	r2, r3
10001aca:	69bb      	ldr	r3, [r7, #24]
10001acc:	4013      	ands	r3, r2
10001ace:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) (config->level)) << pos;
10001ad0:	687b      	ldr	r3, [r7, #4]
10001ad2:	789b      	ldrb	r3, [r3, #2]
10001ad4:	1c1a      	adds	r2, r3, #0
10001ad6:	2317      	movs	r3, #23
10001ad8:	18fb      	adds	r3, r7, r3
10001ada:	781b      	ldrb	r3, [r3, #0]
10001adc:	409a      	lsls	r2, r3
10001ade:	1c13      	adds	r3, r2, #0
10001ae0:	69ba      	ldr	r2, [r7, #24]
10001ae2:	4313      	orrs	r3, r2
10001ae4:	61bb      	str	r3, [r7, #24]

  /* Next, the debounce filter */
  pos = ((uint8_t) CCU8_CC8_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
10001ae6:	231f      	movs	r3, #31
10001ae8:	18fb      	adds	r3, r7, r3
10001aea:	781b      	ldrb	r3, [r3, #0]
10001aec:	18db      	adds	r3, r3, r3
10001aee:	b2da      	uxtb	r2, r3
10001af0:	2317      	movs	r3, #23
10001af2:	18fb      	adds	r3, r7, r3
10001af4:	3219      	adds	r2, #25
10001af6:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
10001af8:	2317      	movs	r3, #23
10001afa:	18fb      	adds	r3, r7, r3
10001afc:	781b      	ldrb	r3, [r3, #0]
10001afe:	2203      	movs	r2, #3
10001b00:	409a      	lsls	r2, r3
10001b02:	1c13      	adds	r3, r2, #0
10001b04:	43da      	mvns	r2, r3
10001b06:	69bb      	ldr	r3, [r7, #24]
10001b08:	4013      	ands	r3, r2
10001b0a:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->duration) << pos;
10001b0c:	687b      	ldr	r3, [r7, #4]
10001b0e:	78db      	ldrb	r3, [r3, #3]
10001b10:	1c1a      	adds	r2, r3, #0
10001b12:	2317      	movs	r3, #23
10001b14:	18fb      	adds	r3, r7, r3
10001b16:	781b      	ldrb	r3, [r3, #0]
10001b18:	409a      	lsls	r2, r3
10001b1a:	1c13      	adds	r3, r2, #0
10001b1c:	69ba      	ldr	r2, [r7, #24]
10001b1e:	4313      	orrs	r3, r2
10001b20:	61bb      	str	r3, [r7, #24]

  /* Finally the input */
  pos = ((uint8_t) CCU8_CC8_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
10001b22:	2317      	movs	r3, #23
10001b24:	18fb      	adds	r3, r7, r3
10001b26:	221f      	movs	r2, #31
10001b28:	18ba      	adds	r2, r7, r2
10001b2a:	7812      	ldrb	r2, [r2, #0]
10001b2c:	0092      	lsls	r2, r2, #2
10001b2e:	701a      	strb	r2, [r3, #0]
  ins &= ~(((uint32_t) XMC_CCU8_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
10001b30:	2317      	movs	r3, #23
10001b32:	18fb      	adds	r3, r7, r3
10001b34:	781b      	ldrb	r3, [r3, #0]
10001b36:	220f      	movs	r2, #15
10001b38:	409a      	lsls	r2, r3
10001b3a:	1c13      	adds	r3, r2, #0
10001b3c:	43da      	mvns	r2, r3
10001b3e:	69bb      	ldr	r3, [r7, #24]
10001b40:	4013      	ands	r3, r2
10001b42:	61bb      	str	r3, [r7, #24]
  ins |= ((uint32_t) config->mapped_input) << pos;
10001b44:	687b      	ldr	r3, [r7, #4]
10001b46:	781b      	ldrb	r3, [r3, #0]
10001b48:	1c1a      	adds	r2, r3, #0
10001b4a:	2317      	movs	r3, #23
10001b4c:	18fb      	adds	r3, r7, r3
10001b4e:	781b      	ldrb	r3, [r3, #0]
10001b50:	409a      	lsls	r2, r3
10001b52:	1c13      	adds	r3, r2, #0
10001b54:	69ba      	ldr	r2, [r7, #24]
10001b56:	4313      	orrs	r3, r2
10001b58:	61bb      	str	r3, [r7, #24]

  slice->INS = ins;
10001b5a:	68fb      	ldr	r3, [r7, #12]
10001b5c:	69ba      	ldr	r2, [r7, #24]
10001b5e:	601a      	str	r2, [r3, #0]
#endif
}
10001b60:	46bd      	mov	sp, r7
10001b62:	b008      	add	sp, #32
10001b64:	bd80      	pop	{r7, pc}
10001b66:	46c0      	nop			; (mov r8, r8)

10001b68 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
10001b68:	b580      	push	{r7, lr}
10001b6a:	b082      	sub	sp, #8
10001b6c:	af00      	add	r7, sp, #0
10001b6e:	6078      	str	r0, [r7, #4]
10001b70:	1c0a      	adds	r2, r1, #0
10001b72:	1cbb      	adds	r3, r7, #2
10001b74:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10001b76:	1cbb      	adds	r3, r7, #2
10001b78:	881a      	ldrh	r2, [r3, #0]
10001b7a:	687b      	ldr	r3, [r7, #4]
10001b7c:	635a      	str	r2, [r3, #52]	; 0x34
}
10001b7e:	46bd      	mov	sp, r7
10001b80:	b002      	add	sp, #8
10001b82:	bd80      	pop	{r7, pc}

10001b84 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
    const uint16_t compare_val)
{
10001b84:	b580      	push	{r7, lr}
10001b86:	b082      	sub	sp, #8
10001b88:	af00      	add	r7, sp, #0
10001b8a:	6078      	str	r0, [r7, #4]
10001b8c:	1c08      	adds	r0, r1, #0
10001b8e:	1c11      	adds	r1, r2, #0
10001b90:	1cfb      	adds	r3, r7, #3
10001b92:	1c02      	adds	r2, r0, #0
10001b94:	701a      	strb	r2, [r3, #0]
10001b96:	1c3b      	adds	r3, r7, #0
10001b98:	1c0a      	adds	r2, r1, #0
10001b9a:	801a      	strh	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
10001b9c:	1cfb      	adds	r3, r7, #3
10001b9e:	781b      	ldrb	r3, [r3, #0]
10001ba0:	2b00      	cmp	r3, #0
10001ba2:	d104      	bne.n	10001bae <XMC_CCU8_SLICE_SetTimerCompareMatch+0x2a>
  {
    slice->CR1S = (uint32_t) compare_val;
10001ba4:	1c3b      	adds	r3, r7, #0
10001ba6:	881a      	ldrh	r2, [r3, #0]
10001ba8:	687b      	ldr	r3, [r7, #4]
10001baa:	63da      	str	r2, [r3, #60]	; 0x3c
10001bac:	e003      	b.n	10001bb6 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x32>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
10001bae:	1c3b      	adds	r3, r7, #0
10001bb0:	881a      	ldrh	r2, [r3, #0]
10001bb2:	687b      	ldr	r3, [r7, #4]
10001bb4:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
10001bb6:	46bd      	mov	sp, r7
10001bb8:	b002      	add	sp, #8
10001bba:	bd80      	pop	{r7, pc}

10001bbc <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
10001bbc:	b580      	push	{r7, lr}
10001bbe:	b086      	sub	sp, #24
10001bc0:	af00      	add	r7, sp, #0
10001bc2:	6078      	str	r0, [r7, #4]
10001bc4:	1c08      	adds	r0, r1, #0
10001bc6:	1c11      	adds	r1, r2, #0
10001bc8:	1cfb      	adds	r3, r7, #3
10001bca:	1c02      	adds	r2, r0, #0
10001bcc:	701a      	strb	r2, [r3, #0]
10001bce:	1cbb      	adds	r3, r7, #2
10001bd0:	1c0a      	adds	r2, r1, #0
10001bd2:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  switch (event)
10001bd4:	1cfb      	adds	r3, r7, #3
10001bd6:	781b      	ldrb	r3, [r3, #0]
10001bd8:	2b0b      	cmp	r3, #11
10001bda:	d825      	bhi.n	10001c28 <XMC_CCU8_SLICE_SetInterruptNode+0x6c>
10001bdc:	009a      	lsls	r2, r3, #2
10001bde:	4b22      	ldr	r3, [pc, #136]	; (10001c68 <XMC_CCU8_SLICE_SetInterruptNode+0xac>)
10001be0:	18d3      	adds	r3, r2, r3
10001be2:	681b      	ldr	r3, [r3, #0]
10001be4:	469f      	mov	pc, r3
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
10001be6:	2303      	movs	r3, #3
10001be8:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
10001bea:	2300      	movs	r3, #0
10001bec:	613b      	str	r3, [r7, #16]
      break;
10001bee:	e020      	b.n	10001c32 <XMC_CCU8_SLICE_SetInterruptNode+0x76>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
10001bf0:	230c      	movs	r3, #12
10001bf2:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
10001bf4:	2302      	movs	r3, #2
10001bf6:	613b      	str	r3, [r7, #16]
      break;
10001bf8:	e01b      	b.n	10001c32 <XMC_CCU8_SLICE_SetInterruptNode+0x76>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
10001bfa:	2330      	movs	r3, #48	; 0x30
10001bfc:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
10001bfe:	2304      	movs	r3, #4
10001c00:	613b      	str	r3, [r7, #16]
      break;
10001c02:	e016      	b.n	10001c32 <XMC_CCU8_SLICE_SetInterruptNode+0x76>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
10001c04:	23c0      	movs	r3, #192	; 0xc0
10001c06:	009b      	lsls	r3, r3, #2
10001c08:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
10001c0a:	2308      	movs	r3, #8
10001c0c:	613b      	str	r3, [r7, #16]
      break;
10001c0e:	e010      	b.n	10001c32 <XMC_CCU8_SLICE_SetInterruptNode+0x76>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
10001c10:	23c0      	movs	r3, #192	; 0xc0
10001c12:	011b      	lsls	r3, r3, #4
10001c14:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
10001c16:	230a      	movs	r3, #10
10001c18:	613b      	str	r3, [r7, #16]
      break;
10001c1a:	e00a      	b.n	10001c32 <XMC_CCU8_SLICE_SetInterruptNode+0x76>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU8_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
10001c1c:	23c0      	movs	r3, #192	; 0xc0
10001c1e:	019b      	lsls	r3, r3, #6
10001c20:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
10001c22:	230c      	movs	r3, #12
10001c24:	613b      	str	r3, [r7, #16]
      break;
10001c26:	e004      	b.n	10001c32 <XMC_CCU8_SLICE_SetInterruptNode+0x76>
	  
	default:
	  mask = 0;
10001c28:	2300      	movs	r3, #0
10001c2a:	617b      	str	r3, [r7, #20]
	  pos = 0;
10001c2c:	2300      	movs	r3, #0
10001c2e:	613b      	str	r3, [r7, #16]
	  break;
10001c30:	46c0      	nop			; (mov r8, r8)
  }

  if (mask != 0)
10001c32:	697b      	ldr	r3, [r7, #20]
10001c34:	2b00      	cmp	r3, #0
10001c36:	d014      	beq.n	10001c62 <XMC_CCU8_SLICE_SetInterruptNode+0xa6>
  {
    srs = slice->SRS;
10001c38:	687b      	ldr	r3, [r7, #4]
10001c3a:	22a8      	movs	r2, #168	; 0xa8
10001c3c:	589b      	ldr	r3, [r3, r2]
10001c3e:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
10001c40:	697b      	ldr	r3, [r7, #20]
10001c42:	43da      	mvns	r2, r3
10001c44:	68fb      	ldr	r3, [r7, #12]
10001c46:	4013      	ands	r3, r2
10001c48:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
10001c4a:	1cbb      	adds	r3, r7, #2
10001c4c:	781a      	ldrb	r2, [r3, #0]
10001c4e:	693b      	ldr	r3, [r7, #16]
10001c50:	409a      	lsls	r2, r3
10001c52:	1c13      	adds	r3, r2, #0
10001c54:	68fa      	ldr	r2, [r7, #12]
10001c56:	4313      	orrs	r3, r2
10001c58:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
10001c5a:	687b      	ldr	r3, [r7, #4]
10001c5c:	21a8      	movs	r1, #168	; 0xa8
10001c5e:	68fa      	ldr	r2, [r7, #12]
10001c60:	505a      	str	r2, [r3, r1]
  }
}
10001c62:	46bd      	mov	sp, r7
10001c64:	b006      	add	sp, #24
10001c66:	bd80      	pop	{r7, pc}
10001c68:	10002770 	.word	0x10002770

10001c6c <XMC_CCU8_SLICE_DeadTimeInit>:
}

/* Initializes Dead time configuration for the slice outputs */
void XMC_CCU8_SLICE_DeadTimeInit(XMC_CCU8_SLICE_t *const slice,
                                 const XMC_CCU8_SLICE_DEAD_TIME_CONFIG_t *const config)
{
10001c6c:	b580      	push	{r7, lr}
10001c6e:	b082      	sub	sp, #8
10001c70:	af00      	add	r7, sp, #0
10001c72:	6078      	str	r0, [r7, #4]
10001c74:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_ConfigureDeadTime:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* Program dead time value for channel 1 */
  slice->DC1R = config->dc1r;
10001c76:	683b      	ldr	r3, [r7, #0]
10001c78:	685a      	ldr	r2, [r3, #4]
10001c7a:	687b      	ldr	r3, [r7, #4]
10001c7c:	651a      	str	r2, [r3, #80]	; 0x50
  /* Program dead time value for channel 2 */
  slice->DC2R = config->dc2r;
10001c7e:	683b      	ldr	r3, [r7, #0]
10001c80:	689a      	ldr	r2, [r3, #8]
10001c82:	687b      	ldr	r3, [r7, #4]
10001c84:	655a      	str	r2, [r3, #84]	; 0x54
  /* Program dead time control configuration */
  slice->DTC = config->dtc;
10001c86:	683b      	ldr	r3, [r7, #0]
10001c88:	681a      	ldr	r2, [r3, #0]
10001c8a:	687b      	ldr	r3, [r7, #4]
10001c8c:	64da      	str	r2, [r3, #76]	; 0x4c
}
10001c8e:	46bd      	mov	sp, r7
10001c90:	b002      	add	sp, #8
10001c92:	bd80      	pop	{r7, pc}

10001c94 <__aeabi_uidiv>:
/***********************************************************************************************************************
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
10001c94:	b580      	push	{r7, lr}
10001c96:	b088      	sub	sp, #32
10001c98:	af00      	add	r7, sp, #0
10001c9a:	6078      	str	r0, [r7, #4]
10001c9c:	6039      	str	r1, [r7, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10001c9e:	f3ef 8310 	mrs	r3, PRIMASK
10001ca2:	617b      	str	r3, [r7, #20]
  return(result);
10001ca4:	697b      	ldr	r3, [r7, #20]
 * API IMPLEMENTATION - Utility functions
 ********************************************************************************************************************/
__attribute__((always_inline)) __STATIC_INLINE uint32_t critical_section_enter(void)
{
  uint32_t status;
  status = __get_PRIMASK();
10001ca6:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10001ca8:	b672      	cpsid	i
  __disable_irq ();
  return status;
10001caa:	693b      	ldr	r3, [r7, #16]
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  uint32_t result;
  uint32_t ics;
  ics = critical_section_enter();
10001cac:	61fb      	str	r3, [r7, #28]

  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
10001cae:	4b0c      	ldr	r3, [pc, #48]	; (10001ce0 <__aeabi_uidiv+0x4c>)
10001cb0:	2204      	movs	r2, #4
10001cb2:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
10001cb4:	4b0a      	ldr	r3, [pc, #40]	; (10001ce0 <__aeabi_uidiv+0x4c>)
10001cb6:	687a      	ldr	r2, [r7, #4]
10001cb8:	621a      	str	r2, [r3, #32]
  MATH->DVS     = divisor;
10001cba:	4b09      	ldr	r3, [pc, #36]	; (10001ce0 <__aeabi_uidiv+0x4c>)
10001cbc:	683a      	ldr	r2, [r7, #0]
10001cbe:	625a      	str	r2, [r3, #36]	; 0x24

  result = MATH->QUOT;
10001cc0:	4b07      	ldr	r3, [pc, #28]	; (10001ce0 <__aeabi_uidiv+0x4c>)
10001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001cc4:	61bb      	str	r3, [r7, #24]
10001cc6:	69fb      	ldr	r3, [r7, #28]
10001cc8:	60fb      	str	r3, [r7, #12]
10001cca:	68fb      	ldr	r3, [r7, #12]
10001ccc:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10001cce:	68bb      	ldr	r3, [r7, #8]
10001cd0:	f383 8810 	msr	PRIMASK, r3

  critical_section_exit(ics);

  return result;
10001cd4:	69bb      	ldr	r3, [r7, #24]
}
10001cd6:	1c18      	adds	r0, r3, #0
10001cd8:	46bd      	mov	sp, r7
10001cda:	b008      	add	sp, #32
10001cdc:	bd80      	pop	{r7, pc}
10001cde:	46c0      	nop			; (mov r8, r8)
10001ce0:	40030000 	.word	0x40030000

10001ce4 <_init>:
  }
}

/* Init */
void _init(void)
{}
10001ce4:	b580      	push	{r7, lr}
10001ce6:	af00      	add	r7, sp, #0
10001ce8:	46bd      	mov	sp, r7
10001cea:	bd80      	pop	{r7, pc}

10001cec <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
10001cec:	b580      	push	{r7, lr}
10001cee:	b082      	sub	sp, #8
10001cf0:	af00      	add	r7, sp, #0
10001cf2:	6078      	str	r0, [r7, #4]
10001cf4:	1c0a      	adds	r2, r1, #0
10001cf6:	1cfb      	adds	r3, r7, #3
10001cf8:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1 << slice_number);
10001cfa:	1cfb      	adds	r3, r7, #3
10001cfc:	781b      	ldrb	r3, [r3, #0]
10001cfe:	2201      	movs	r2, #1
10001d00:	409a      	lsls	r2, r3
10001d02:	687b      	ldr	r3, [r7, #4]
10001d04:	60da      	str	r2, [r3, #12]
}
10001d06:	46bd      	mov	sp, r7
10001d08:	b002      	add	sp, #8
10001d0a:	bd80      	pop	{r7, pc}

10001d0c <XMC_CCU8_SLICE_EnableTrap>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_TrapConfig()<BR>  XMC_CCU8_SLICE_DisableTrap()<BR>  XMC_CCU8_SLICE_ConfigureEvent()<BR>
 *  XMC_CCU8_SLICE_SetInput().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableTrap(XMC_CCU8_SLICE_t *const slice, const uint32_t out_mask)
{
10001d0c:	b580      	push	{r7, lr}
10001d0e:	b082      	sub	sp, #8
10001d10:	af00      	add	r7, sp, #0
10001d12:	6078      	str	r0, [r7, #4]
10001d14:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TC |= (uint32_t)out_mask << CCU8_CC8_TC_TRAPE0_Pos;
10001d16:	687b      	ldr	r3, [r7, #4]
10001d18:	695a      	ldr	r2, [r3, #20]
10001d1a:	683b      	ldr	r3, [r7, #0]
10001d1c:	045b      	lsls	r3, r3, #17
10001d1e:	431a      	orrs	r2, r3
10001d20:	687b      	ldr	r3, [r7, #4]
10001d22:	615a      	str	r2, [r3, #20]
}
10001d24:	46bd      	mov	sp, r7
10001d26:	b002      	add	sp, #8
10001d28:	bd80      	pop	{r7, pc}
10001d2a:	46c0      	nop			; (mov r8, r8)

10001d2c <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
10001d2c:	b580      	push	{r7, lr}
10001d2e:	b082      	sub	sp, #8
10001d30:	af00      	add	r7, sp, #0
10001d32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
10001d34:	687b      	ldr	r3, [r7, #4]
10001d36:	2201      	movs	r2, #1
10001d38:	60da      	str	r2, [r3, #12]
}
10001d3a:	46bd      	mov	sp, r7
10001d3c:	b002      	add	sp, #8
10001d3e:	bd80      	pop	{r7, pc}

10001d40 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
10001d40:	b580      	push	{r7, lr}
10001d42:	b082      	sub	sp, #8
10001d44:	af00      	add	r7, sp, #0
10001d46:	6078      	str	r0, [r7, #4]
10001d48:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
10001d4a:	687b      	ldr	r3, [r7, #4]
10001d4c:	683a      	ldr	r2, [r7, #0]
10001d4e:	611a      	str	r2, [r3, #16]
}
10001d50:	46bd      	mov	sp, r7
10001d52:	b002      	add	sp, #8
10001d54:	bd80      	pop	{r7, pc}
10001d56:	46c0      	nop			; (mov r8, r8)

10001d58 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR>
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
10001d58:	b580      	push	{r7, lr}
10001d5a:	b082      	sub	sp, #8
10001d5c:	af00      	add	r7, sp, #0
10001d5e:	6078      	str	r0, [r7, #4]
10001d60:	1c0a      	adds	r2, r1, #0
10001d62:	1cfb      	adds	r3, r7, #3
10001d64:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
10001d66:	687b      	ldr	r3, [r7, #4]
10001d68:	22a4      	movs	r2, #164	; 0xa4
10001d6a:	589a      	ldr	r2, [r3, r2]
10001d6c:	1cfb      	adds	r3, r7, #3
10001d6e:	781b      	ldrb	r3, [r3, #0]
10001d70:	2101      	movs	r1, #1
10001d72:	4099      	lsls	r1, r3
10001d74:	1c0b      	adds	r3, r1, #0
10001d76:	431a      	orrs	r2, r3
10001d78:	687b      	ldr	r3, [r7, #4]
10001d7a:	21a4      	movs	r1, #164	; 0xa4
10001d7c:	505a      	str	r2, [r3, r1]
}
10001d7e:	46bd      	mov	sp, r7
10001d80:	b002      	add	sp, #8
10001d82:	bd80      	pop	{r7, pc}

10001d84 <XMC_CCU8_SLICE_SetShadowTransferMode>:
 * XMC_CCU8_EnableShadowTransfer()<BR>
 * @note Not available for XMC4500 series
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
10001d84:	b580      	push	{r7, lr}
10001d86:	b082      	sub	sp, #8
10001d88:	af00      	add	r7, sp, #0
10001d8a:	6078      	str	r0, [r7, #4]
10001d8c:	1c0a      	adds	r2, r1, #0
10001d8e:	1cfb      	adds	r3, r7, #3
10001d90:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & (uint32_t)~CCU8_CC8_STC_STM_Msk) |
10001d92:	687b      	ldr	r3, [r7, #4]
10001d94:	22b4      	movs	r2, #180	; 0xb4
10001d96:	589b      	ldr	r3, [r3, r2]
10001d98:	2206      	movs	r2, #6
10001d9a:	4393      	bics	r3, r2
10001d9c:	1c1a      	adds	r2, r3, #0
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
10001d9e:	1cfb      	adds	r3, r7, #3
10001da0:	781b      	ldrb	r3, [r3, #0]
10001da2:	005b      	lsls	r3, r3, #1
10001da4:	1c19      	adds	r1, r3, #0
10001da6:	2306      	movs	r3, #6
10001da8:	400b      	ands	r3, r1
 */
__STATIC_INLINE void XMC_CCU8_SLICE_SetShadowTransferMode(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_SHADOW_TRANSFER_MODE_t shadow_transfer_mode)
{
  XMC_ASSERT("XMC_CCU8_SLICE_SetShadowTransferMode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->STC = ((slice->STC) & (uint32_t)~CCU8_CC8_STC_STM_Msk) |
10001daa:	431a      	orrs	r2, r3
10001dac:	687b      	ldr	r3, [r7, #4]
10001dae:	21b4      	movs	r1, #180	; 0xb4
10001db0:	505a      	str	r2, [r3, r1]
               ((shadow_transfer_mode << CCU8_CC8_STC_STM_Pos) & (uint32_t)CCU8_CC8_STC_STM_Msk);
}
10001db2:	46bd      	mov	sp, r7
10001db4:	b002      	add	sp, #8
10001db6:	bd80      	pop	{r7, pc}

10001db8 <PWM_CCU8_Init>:
  return version;
}

/* This function initializes the app */
PWM_CCU8_STATUS_t PWM_CCU8_Init(PWM_CCU8_t* handle_ptr)
{
10001db8:	b590      	push	{r4, r7, lr}
10001dba:	b087      	sub	sp, #28
10001dbc:	af00      	add	r7, sp, #0
10001dbe:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;
  GLOBAL_CCU8_STATUS_t status_ccu8_global;
  uint32_t frequency_module;
  uint32_t prescalar;

  status = PWM_CCU8_STATUS_FAILURE;
10001dc0:	2317      	movs	r3, #23
10001dc2:	18fb      	adds	r3, r7, r3
10001dc4:	2201      	movs	r2, #1
10001dc6:	701a      	strb	r2, [r3, #0]
  status_ccu8_global = GLOBAL_CCU8_STATUS_FAILURE;
10001dc8:	2316      	movs	r3, #22
10001dca:	18fb      	adds	r3, r7, r3
10001dcc:	2201      	movs	r2, #1
10001dce:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU8_Init:handle_ptr is NULL", (handle_ptr != NULL));

  if (PWM_CCU8_STATE_UNINITIALIZED == handle_ptr->state)
10001dd0:	687b      	ldr	r3, [r7, #4]
10001dd2:	7f1b      	ldrb	r3, [r3, #28]
10001dd4:	2b00      	cmp	r3, #0
10001dd6:	d000      	beq.n	10001dda <PWM_CCU8_Init+0x22>
10001dd8:	e0af      	b.n	10001f3a <PWM_CCU8_Init+0x182>
  {
    /* Initialize consumed Apps */
    status_ccu8_global = GLOBAL_CCU8_Init(handle_ptr->config_ptr->global_ccu8_handle);
10001dda:	687b      	ldr	r3, [r7, #4]
10001ddc:	681b      	ldr	r3, [r3, #0]
10001dde:	228c      	movs	r2, #140	; 0x8c
10001de0:	589b      	ldr	r3, [r3, r2]
10001de2:	2216      	movs	r2, #22
10001de4:	18bc      	adds	r4, r7, r2
10001de6:	1c18      	adds	r0, r3, #0
10001de8:	f000 fbc8 	bl	1000257c <GLOBAL_CCU8_Init>
10001dec:	1c03      	adds	r3, r0, #0
10001dee:	7023      	strb	r3, [r4, #0]

    /* Initialize CCU8x_CC8y slice */
    if (GLOBAL_CCU8_STATUS_SUCCESS == status_ccu8_global)
10001df0:	2316      	movs	r3, #22
10001df2:	18fb      	adds	r3, r7, r3
10001df4:	781b      	ldrb	r3, [r3, #0]
10001df6:	2b00      	cmp	r3, #0
10001df8:	d000      	beq.n	10001dfc <PWM_CCU8_Init+0x44>
10001dfa:	e09a      	b.n	10001f32 <PWM_CCU8_Init+0x17a>
    {
      XMC_DEBUG("PWM_CCU8_Init:Initilizing slice");

      /* Configure CCU8x_CC8y slice as timer */
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
10001dfc:	687b      	ldr	r3, [r7, #4]
10001dfe:	689a      	ldr	r2, [r3, #8]
10001e00:	687b      	ldr	r3, [r7, #4]
10001e02:	681b      	ldr	r3, [r3, #0]
10001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001e06:	1c10      	adds	r0, r2, #0
10001e08:	1c19      	adds	r1, r3, #0
10001e0a:	f7ff fbb7 	bl	1000157c <XMC_CCU8_SLICE_CompareInit>
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);
10001e0e:	687b      	ldr	r3, [r7, #4]
10001e10:	689a      	ldr	r2, [r3, #8]
10001e12:	687b      	ldr	r3, [r7, #4]
10001e14:	681b      	ldr	r3, [r3, #0]
10001e16:	885b      	ldrh	r3, [r3, #2]
10001e18:	1c10      	adds	r0, r2, #0
10001e1a:	1c19      	adds	r1, r3, #0
10001e1c:	f7ff fea4 	bl	10001b68 <XMC_CCU8_SLICE_SetTimerPeriodMatch>

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
10001e20:	687b      	ldr	r3, [r7, #4]
10001e22:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
10001e24:	687b      	ldr	r3, [r7, #4]
10001e26:	681b      	ldr	r3, [r3, #0]
      XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr);
      /* Set period match value of the timer  */
      XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->period_value);

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
10001e28:	889b      	ldrh	r3, [r3, #4]
10001e2a:	1c10      	adds	r0, r2, #0
10001e2c:	2100      	movs	r1, #0
10001e2e:	1c1a      	adds	r2, r3, #0
10001e30:	f7ff fea8 	bl	10001b84 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
10001e34:	687b      	ldr	r3, [r7, #4]
10001e36:	689a      	ldr	r2, [r3, #8]
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);
10001e38:	687b      	ldr	r3, [r7, #4]
10001e3a:	681b      	ldr	r3, [r3, #0]

      /* Set timer compare match value for channel 1 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
10001e3c:	88db      	ldrh	r3, [r3, #6]
10001e3e:	1c10      	adds	r0, r2, #0
10001e40:	2101      	movs	r1, #1
10001e42:	1c1a      	adds	r2, r3, #0
10001e44:	f7ff fe9e 	bl	10001b84 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
10001e48:	687b      	ldr	r3, [r7, #4]
10001e4a:	681b      	ldr	r3, [r3, #0]
10001e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001e4e:	78db      	ldrb	r3, [r3, #3]
10001e50:	2202      	movs	r2, #2
10001e52:	4013      	ands	r3, r2
10001e54:	b2db      	uxtb	r3, r3
10001e56:	2b00      	cmp	r3, #0
10001e58:	d108      	bne.n	10001e6c <PWM_CCU8_Init+0xb4>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
10001e5a:	687b      	ldr	r3, [r7, #4]
10001e5c:	681b      	ldr	r3, [r3, #0]
10001e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001e60:	78db      	ldrb	r3, [r3, #3]
10001e62:	2204      	movs	r2, #4
10001e64:	4013      	ands	r3, r2
10001e66:	b2db      	uxtb	r3, r3
                                          (uint16_t) handle_ptr->config_ptr->compare1_value);
      /* Set timer compare match value for channel 2 */
      XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
10001e68:	2b00      	cmp	r3, #0
10001e6a:	d008      	beq.n	10001e7e <PWM_CCU8_Init+0xc6>
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
10001e6c:	687b      	ldr	r3, [r7, #4]
10001e6e:	685a      	ldr	r2, [r3, #4]
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
10001e70:	687b      	ldr	r3, [r7, #4]
10001e72:	681b      	ldr	r3, [r3, #0]
10001e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          (uint16_t) handle_ptr->config_ptr->compare2_value);

      if ((1U == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch1_enable) || (1U
          == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->mcm_ch2_enable))
      {
        XMC_CCU8_SetMultiChannelShadowTransferMode(handle_ptr->ccu8_module_ptr,
10001e76:	1c10      	adds	r0, r2, #0
10001e78:	1c19      	adds	r1, r3, #0
10001e7a:	f7ff fbb9 	bl	100015f0 <XMC_CCU8_SetMultiChannelShadowTransferMode>
                                                   (uint32_t) handle_ptr->config_ptr->mcm_shadow_txfr_mode);
      }

#if (UC_SERIES != XMC45) /*STC register not available on XMC45xx devices */
      XMC_CCU8_SLICE_SetShadowTransferMode(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->shadow_transfer_mode);
10001e7e:	687b      	ldr	r3, [r7, #4]
10001e80:	6899      	ldr	r1, [r3, #8]
10001e82:	687b      	ldr	r3, [r7, #4]
10001e84:	681b      	ldr	r3, [r3, #0]
10001e86:	2244      	movs	r2, #68	; 0x44
10001e88:	5c9b      	ldrb	r3, [r3, r2]
10001e8a:	1c08      	adds	r0, r1, #0
10001e8c:	1c19      	adds	r1, r3, #0
10001e8e:	f7ff ff79 	bl	10001d84 <XMC_CCU8_SLICE_SetShadowTransferMode>
        XMC_CCU8_SLICE_EnableCascadedShadowTransfer(handle_ptr->ccu8_slice_ptr);
      }
#endif

      /* Transfer value from shadow timer registers to actual timer registers */
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
10001e92:	687b      	ldr	r3, [r7, #4]
10001e94:	685a      	ldr	r2, [r3, #4]
10001e96:	687b      	ldr	r3, [r7, #4]
10001e98:	691b      	ldr	r3, [r3, #16]
10001e9a:	1c10      	adds	r0, r2, #0
10001e9c:	1c19      	adds	r1, r3, #0
10001e9e:	f7ff ff4f 	bl	10001d40 <XMC_CCU8_EnableShadowTransfer>
      XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->dither_shadow_txfr_msk);
10001ea2:	687b      	ldr	r3, [r7, #4]
10001ea4:	685a      	ldr	r2, [r3, #4]
10001ea6:	687b      	ldr	r3, [r7, #4]
10001ea8:	695b      	ldr	r3, [r3, #20]
10001eaa:	1c10      	adds	r0, r2, #0
10001eac:	1c19      	adds	r1, r3, #0
10001eae:	f7ff ff47 	bl	10001d40 <XMC_CCU8_EnableShadowTransfer>

      XMC_CCU8_SLICE_DeadTimeInit(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->dt_config_ptr);
10001eb2:	687b      	ldr	r3, [r7, #4]
10001eb4:	689a      	ldr	r2, [r3, #8]
10001eb6:	687b      	ldr	r3, [r7, #4]
10001eb8:	681b      	ldr	r3, [r3, #0]
10001eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001ebc:	1c10      	adds	r0, r2, #0
10001ebe:	1c19      	adds	r1, r3, #0
10001ec0:	f7ff fed4 	bl	10001c6c <XMC_CCU8_SLICE_DeadTimeInit>

      /* Configure events */
      PWM_CCU8_lConfigure_Events(handle_ptr);
10001ec4:	687b      	ldr	r3, [r7, #4]
10001ec6:	1c18      	adds	r0, r3, #0
10001ec8:	f000 f962 	bl	10002190 <PWM_CCU8_lConfigure_Events>

      /* Enable the interrupts */
      PWM_CCU8_lInit_Interrupt(handle_ptr);
10001ecc:	687b      	ldr	r3, [r7, #4]
10001ece:	1c18      	adds	r0, r3, #0
10001ed0:	f000 f83e 	bl	10001f50 <PWM_CCU8_lInit_Interrupt>

      /*Initializes the GPIO*/
      PWM_CCU8_lInit_GPIO(handle_ptr);
10001ed4:	687b      	ldr	r3, [r7, #4]
10001ed6:	1c18      	adds	r0, r3, #0
10001ed8:	f000 f8fe 	bl	100020d8 <PWM_CCU8_lInit_GPIO>

      frequency_module = handle_ptr->config_ptr->global_ccu8_handle->module_frequency;
10001edc:	687b      	ldr	r3, [r7, #4]
10001ede:	681b      	ldr	r3, [r3, #0]
10001ee0:	228c      	movs	r2, #140	; 0x8c
10001ee2:	589b      	ldr	r3, [r3, r2]
10001ee4:	681b      	ldr	r3, [r3, #0]
10001ee6:	613b      	str	r3, [r7, #16]
      prescalar = (uint32_t) handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->prescaler_initval;
10001ee8:	687b      	ldr	r3, [r7, #4]
10001eea:	681b      	ldr	r3, [r3, #0]
10001eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001eee:	7b1b      	ldrb	r3, [r3, #12]
10001ef0:	071b      	lsls	r3, r3, #28
10001ef2:	0f1b      	lsrs	r3, r3, #28
10001ef4:	b2db      	uxtb	r3, r3
10001ef6:	60fb      	str	r3, [r7, #12]
      frequency_module = frequency_module / ((uint32_t) 1 << prescalar);
10001ef8:	68fb      	ldr	r3, [r7, #12]
10001efa:	693a      	ldr	r2, [r7, #16]
10001efc:	40da      	lsrs	r2, r3
10001efe:	1c13      	adds	r3, r2, #0
10001f00:	613b      	str	r3, [r7, #16]
      handle_ptr->frequency_tclk = frequency_module;
10001f02:	687b      	ldr	r3, [r7, #4]
10001f04:	693a      	ldr	r2, [r7, #16]
10001f06:	621a      	str	r2, [r3, #32]

      handle_ptr->state = PWM_CCU8_STATE_INITIALIZED;
10001f08:	687b      	ldr	r3, [r7, #4]
10001f0a:	2201      	movs	r2, #1
10001f0c:	771a      	strb	r2, [r3, #28]
      status = PWM_CCU8_STATUS_SUCCESS;
10001f0e:	2317      	movs	r3, #23
10001f10:	18fb      	adds	r3, r7, r3
10001f12:	2200      	movs	r2, #0
10001f14:	701a      	strb	r2, [r3, #0]

      /* Start the PWM generation if start at initialization is enabled */
      if ((bool) true == handle_ptr->config_ptr->start_control)
10001f16:	687b      	ldr	r3, [r7, #4]
10001f18:	681b      	ldr	r3, [r3, #0]
10001f1a:	781b      	ldrb	r3, [r3, #0]
10001f1c:	2b00      	cmp	r3, #0
10001f1e:	d010      	beq.n	10001f42 <PWM_CCU8_Init+0x18a>
      {
        status = PWM_CCU8_Start(handle_ptr);
10001f20:	2317      	movs	r3, #23
10001f22:	18fc      	adds	r4, r7, r3
10001f24:	687b      	ldr	r3, [r7, #4]
10001f26:	1c18      	adds	r0, r3, #0
10001f28:	f000 fa1e 	bl	10002368 <PWM_CCU8_Start>
10001f2c:	1c03      	adds	r3, r0, #0
10001f2e:	7023      	strb	r3, [r4, #0]
10001f30:	e007      	b.n	10001f42 <PWM_CCU8_Init+0x18a>
      }

    }
    else
    {
      handle_ptr->state = PWM_CCU8_STATE_UNINITIALIZED;
10001f32:	687b      	ldr	r3, [r7, #4]
10001f34:	2200      	movs	r2, #0
10001f36:	771a      	strb	r2, [r3, #28]
10001f38:	e003      	b.n	10001f42 <PWM_CCU8_Init+0x18a>
    }

  }
  else
  {
    status = PWM_CCU8_STATUS_ALREADY_INITIALIZED;
10001f3a:	2317      	movs	r3, #23
10001f3c:	18fb      	adds	r3, r7, r3
10001f3e:	2202      	movs	r2, #2
10001f40:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU8_Init:PWM_CCU8_STATUS_ALREADY_INITIALIZED");
  }

  return (status);
10001f42:	2317      	movs	r3, #23
10001f44:	18fb      	adds	r3, r7, r3
10001f46:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU8_Init() api */
10001f48:	1c18      	adds	r0, r3, #0
10001f4a:	46bd      	mov	sp, r7
10001f4c:	b007      	add	sp, #28
10001f4e:	bd90      	pop	{r4, r7, pc}

10001f50 <PWM_CCU8_lInit_Interrupt>:

static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{
10001f50:	b580      	push	{r7, lr}
10001f52:	b082      	sub	sp, #8
10001f54:	af00      	add	r7, sp, #0
10001f56:	6078      	str	r0, [r7, #4]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
10001f58:	687b      	ldr	r3, [r7, #4]
10001f5a:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_per_match);
10001f5c:	687b      	ldr	r3, [r7, #4]
10001f5e:	681b      	ldr	r3, [r3, #0]
static void PWM_CCU8_lInit_Interrupt(PWM_CCU8_t* handle_ptr)
{

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
10001f60:	7c5b      	ldrb	r3, [r3, #17]
10001f62:	1c10      	adds	r0, r2, #0
10001f64:	2100      	movs	r1, #0
10001f66:	1c1a      	adds	r2, r3, #0
10001f68:	f7ff fe28 	bl	10001bbc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
10001f6c:	687b      	ldr	r3, [r7, #4]
10001f6e:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
10001f70:	687b      	ldr	r3, [r7, #4]
10001f72:	681b      	ldr	r3, [r3, #0]

  /* Enable events. Bind event to corresponding service request node. */

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
10001f74:	7c9b      	ldrb	r3, [r3, #18]
10001f76:	1c10      	adds	r0, r2, #0
10001f78:	2102      	movs	r1, #2
10001f7a:	1c1a      	adds	r2, r3, #0
10001f7c:	f7ff fe1e 	bl	10001bbc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
10001f80:	687b      	ldr	r3, [r7, #4]
10001f82:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
10001f84:	687b      	ldr	r3, [r7, #4]
10001f86:	681b      	ldr	r3, [r3, #0]

  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
10001f88:	7cdb      	ldrb	r3, [r3, #19]
10001f8a:	1c10      	adds	r0, r2, #0
10001f8c:	2103      	movs	r1, #3
10001f8e:	1c1a      	adds	r2, r3, #0
10001f90:	f7ff fe14 	bl	10001bbc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
10001f94:	687b      	ldr	r3, [r7, #4]
10001f96:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
10001f98:	687b      	ldr	r3, [r7, #4]
10001f9a:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_per_match);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
10001f9c:	7d1b      	ldrb	r3, [r3, #20]
10001f9e:	1c10      	adds	r0, r2, #0
10001fa0:	2104      	movs	r1, #4
10001fa2:	1c1a      	adds	r2, r3, #0
10001fa4:	f7ff fe0a 	bl	10001bbc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
10001fa8:	687b      	ldr	r3, [r7, #4]
10001faa:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
10001fac:	687b      	ldr	r3, [r7, #4]
10001fae:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1,
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
10001fb0:	7d5b      	ldrb	r3, [r3, #21]
10001fb2:	1c10      	adds	r0, r2, #0
10001fb4:	2105      	movs	r1, #5
10001fb6:	1c1a      	adds	r2, r3, #0
10001fb8:	f7ff fe00 	bl	10001bbc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
10001fbc:	687b      	ldr	r3, [r7, #4]
10001fbe:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_one_match_down);
10001fc0:	687b      	ldr	r3, [r7, #4]
10001fc2:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp1_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
10001fc4:	7d9b      	ldrb	r3, [r3, #22]
10001fc6:	1c10      	adds	r0, r2, #0
10001fc8:	2101      	movs	r1, #1
10001fca:	1c1a      	adds	r2, r3, #0
10001fcc:	f7ff fdf6 	bl	10001bbc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
10001fd0:	687b      	ldr	r3, [r7, #4]
10001fd2:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e0);
10001fd4:	687b      	ldr	r3, [r7, #4]
10001fd6:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_up);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2,
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
10001fd8:	7ddb      	ldrb	r3, [r3, #23]
10001fda:	1c10      	adds	r0, r2, #0
10001fdc:	2108      	movs	r1, #8
10001fde:	1c1a      	adds	r2, r3, #0
10001fe0:	f7ff fdec 	bl	10001bbc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
10001fe4:	687b      	ldr	r3, [r7, #4]
10001fe6:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e1);
10001fe8:	687b      	ldr	r3, [r7, #4]
10001fea:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_cmp2_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH,
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
10001fec:	7e1b      	ldrb	r3, [r3, #24]
10001fee:	1c10      	adds	r0, r2, #0
10001ff0:	2109      	movs	r1, #9
10001ff2:	1c1a      	adds	r2, r3, #0
10001ff4:	f7ff fde2 	bl	10001bbc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
10001ff8:	687b      	ldr	r3, [r7, #4]
10001ffa:	689a      	ldr	r2, [r3, #8]
                                  handle_ptr->config_ptr->sr_e2);
10001ffc:	687b      	ldr	r3, [r7, #4]
10001ffe:	681b      	ldr	r3, [r3, #0]
                                  handle_ptr->config_ptr->sr_one_match_down);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0,
                                  handle_ptr->config_ptr->sr_e0);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1,
                                  handle_ptr->config_ptr->sr_e1);
  XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2,
10002000:	7e5b      	ldrb	r3, [r3, #25]
10002002:	1c10      	adds	r0, r2, #0
10002004:	210a      	movs	r1, #10
10002006:	1c1a      	adds	r2, r3, #0
10002008:	f7ff fdd8 	bl	10001bbc <XMC_CCU8_SLICE_SetInterruptNode>
                                  handle_ptr->config_ptr->sr_e2);

  if ((bool) true == handle_ptr->config_ptr->int_per_match)
1000200c:	687b      	ldr	r3, [r7, #4]
1000200e:	681b      	ldr	r3, [r3, #0]
10002010:	7a1b      	ldrb	r3, [r3, #8]
10002012:	2b00      	cmp	r3, #0
10002014:	d005      	beq.n	10002022 <PWM_CCU8_lInit_Interrupt+0xd2>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt period match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
10002016:	687b      	ldr	r3, [r7, #4]
10002018:	689b      	ldr	r3, [r3, #8]
1000201a:	1c18      	adds	r0, r3, #0
1000201c:	2100      	movs	r1, #0
1000201e:	f7ff fe9b 	bl	10001d58 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_up)
10002022:	687b      	ldr	r3, [r7, #4]
10002024:	681b      	ldr	r3, [r3, #0]
10002026:	7a5b      	ldrb	r3, [r3, #9]
10002028:	2b00      	cmp	r3, #0
1000202a:	d005      	beq.n	10002038 <PWM_CCU8_lInit_Interrupt+0xe8>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1);
1000202c:	687b      	ldr	r3, [r7, #4]
1000202e:	689b      	ldr	r3, [r3, #8]
10002030:	1c18      	adds	r0, r3, #0
10002032:	2102      	movs	r1, #2
10002034:	f7ff fe90 	bl	10001d58 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp1_match_down)
10002038:	687b      	ldr	r3, [r7, #4]
1000203a:	681b      	ldr	r3, [r3, #0]
1000203c:	7a9b      	ldrb	r3, [r3, #10]
1000203e:	2b00      	cmp	r3, #0
10002040:	d005      	beq.n	1000204e <PWM_CCU8_lInit_Interrupt+0xfe>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch1 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1);
10002042:	687b      	ldr	r3, [r7, #4]
10002044:	689b      	ldr	r3, [r3, #8]
10002046:	1c18      	adds	r0, r3, #0
10002048:	2103      	movs	r1, #3
1000204a:	f7ff fe85 	bl	10001d58 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_up)
1000204e:	687b      	ldr	r3, [r7, #4]
10002050:	681b      	ldr	r3, [r3, #0]
10002052:	7adb      	ldrb	r3, [r3, #11]
10002054:	2b00      	cmp	r3, #0
10002056:	d005      	beq.n	10002064 <PWM_CCU8_lInit_Interrupt+0x114>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 up enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2);
10002058:	687b      	ldr	r3, [r7, #4]
1000205a:	689b      	ldr	r3, [r3, #8]
1000205c:	1c18      	adds	r0, r3, #0
1000205e:	2104      	movs	r1, #4
10002060:	f7ff fe7a 	bl	10001d58 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_cmp2_match_down)
10002064:	687b      	ldr	r3, [r7, #4]
10002066:	681b      	ldr	r3, [r3, #0]
10002068:	7b1b      	ldrb	r3, [r3, #12]
1000206a:	2b00      	cmp	r3, #0
1000206c:	d005      	beq.n	1000207a <PWM_CCU8_lInit_Interrupt+0x12a>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt compare match ch2 down enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2);
1000206e:	687b      	ldr	r3, [r7, #4]
10002070:	689b      	ldr	r3, [r3, #8]
10002072:	1c18      	adds	r0, r3, #0
10002074:	2105      	movs	r1, #5
10002076:	f7ff fe6f 	bl	10001d58 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_one_match_down)
1000207a:	687b      	ldr	r3, [r7, #4]
1000207c:	681b      	ldr	r3, [r3, #0]
1000207e:	7b5b      	ldrb	r3, [r3, #13]
10002080:	2b00      	cmp	r3, #0
10002082:	d005      	beq.n	10002090 <PWM_CCU8_lInit_Interrupt+0x140>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt one match enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH);
10002084:	687b      	ldr	r3, [r7, #4]
10002086:	689b      	ldr	r3, [r3, #8]
10002088:	1c18      	adds	r0, r3, #0
1000208a:	2101      	movs	r1, #1
1000208c:	f7ff fe64 	bl	10001d58 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e0)
10002090:	687b      	ldr	r3, [r7, #4]
10002092:	681b      	ldr	r3, [r3, #0]
10002094:	7b9b      	ldrb	r3, [r3, #14]
10002096:	2b00      	cmp	r3, #0
10002098:	d005      	beq.n	100020a6 <PWM_CCU8_lInit_Interrupt+0x156>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 0 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT0);
1000209a:	687b      	ldr	r3, [r7, #4]
1000209c:	689b      	ldr	r3, [r3, #8]
1000209e:	1c18      	adds	r0, r3, #0
100020a0:	2108      	movs	r1, #8
100020a2:	f7ff fe59 	bl	10001d58 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e1)
100020a6:	687b      	ldr	r3, [r7, #4]
100020a8:	681b      	ldr	r3, [r3, #0]
100020aa:	7bdb      	ldrb	r3, [r3, #15]
100020ac:	2b00      	cmp	r3, #0
100020ae:	d005      	beq.n	100020bc <PWM_CCU8_lInit_Interrupt+0x16c>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 1 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT1);
100020b0:	687b      	ldr	r3, [r7, #4]
100020b2:	689b      	ldr	r3, [r3, #8]
100020b4:	1c18      	adds	r0, r3, #0
100020b6:	2109      	movs	r1, #9
100020b8:	f7ff fe4e 	bl	10001d58 <XMC_CCU8_SLICE_EnableEvent>
  }

  if ((bool) true == handle_ptr->config_ptr->int_e2)
100020bc:	687b      	ldr	r3, [r7, #4]
100020be:	681b      	ldr	r3, [r3, #0]
100020c0:	7c1b      	ldrb	r3, [r3, #16]
100020c2:	2b00      	cmp	r3, #0
100020c4:	d005      	beq.n	100020d2 <PWM_CCU8_lInit_Interrupt+0x182>
  {
    XMC_DEBUG("PWM_CCU8_Init: Interrupt event 2 enable");
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_EVENT2);
100020c6:	687b      	ldr	r3, [r7, #4]
100020c8:	689b      	ldr	r3, [r3, #8]
100020ca:	1c18      	adds	r0, r3, #0
100020cc:	210a      	movs	r1, #10
100020ce:	f7ff fe43 	bl	10001d58 <XMC_CCU8_SLICE_EnableEvent>
  }
}
100020d2:	46bd      	mov	sp, r7
100020d4:	b002      	add	sp, #8
100020d6:	bd80      	pop	{r7, pc}

100020d8 <PWM_CCU8_lInit_GPIO>:
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
100020d8:	b580      	push	{r7, lr}
100020da:	b082      	sub	sp, #8
100020dc:	af00      	add	r7, sp, #0
100020de:	6078      	str	r0, [r7, #4]
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
100020e0:	687b      	ldr	r3, [r7, #4]
100020e2:	681b      	ldr	r3, [r3, #0]
100020e4:	224c      	movs	r2, #76	; 0x4c
100020e6:	5c9b      	ldrb	r3, [r3, r2]
100020e8:	2b00      	cmp	r3, #0
100020ea:	d00e      	beq.n	1000210a <PWM_CCU8_lInit_GPIO+0x32>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
100020ec:	687b      	ldr	r3, [r7, #4]
100020ee:	681b      	ldr	r3, [r3, #0]
100020f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
100020f2:	687b      	ldr	r3, [r7, #4]
100020f4:	681b      	ldr	r3, [r3, #0]
100020f6:	2254      	movs	r2, #84	; 0x54
100020f8:	5c9a      	ldrb	r2, [r3, r2]
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
100020fa:	687b      	ldr	r3, [r7, #4]
100020fc:	681b      	ldr	r3, [r3, #0]
}
static void PWM_CCU8_lInit_GPIO(PWM_CCU8_t* handle_ptr)
{
  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out0_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out0_ptr, handle_ptr->config_ptr->gpio_ch1_out0_pin,
100020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10002100:	1c08      	adds	r0, r1, #0
10002102:	1c11      	adds	r1, r2, #0
10002104:	1c1a      	adds	r2, r3, #0
10002106:	f7ff f81f 	bl	10001148 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
1000210a:	687b      	ldr	r3, [r7, #4]
1000210c:	681b      	ldr	r3, [r3, #0]
1000210e:	225c      	movs	r2, #92	; 0x5c
10002110:	5c9b      	ldrb	r3, [r3, r2]
10002112:	2b00      	cmp	r3, #0
10002114:	d00e      	beq.n	10002134 <PWM_CCU8_lInit_GPIO+0x5c>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
10002116:	687b      	ldr	r3, [r7, #4]
10002118:	681b      	ldr	r3, [r3, #0]
1000211a:	6e19      	ldr	r1, [r3, #96]	; 0x60
1000211c:	687b      	ldr	r3, [r7, #4]
1000211e:	681b      	ldr	r3, [r3, #0]
10002120:	2264      	movs	r2, #100	; 0x64
10002122:	5c9a      	ldrb	r2, [r3, r2]
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
10002124:	687b      	ldr	r3, [r7, #4]
10002126:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out0_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch1_out1_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch1_out1_ptr, handle_ptr->config_ptr->gpio_ch1_out1_pin,
10002128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
1000212a:	1c08      	adds	r0, r1, #0
1000212c:	1c11      	adds	r1, r2, #0
1000212e:	1c1a      	adds	r2, r3, #0
10002130:	f7ff f80a 	bl	10001148 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
10002134:	687b      	ldr	r3, [r7, #4]
10002136:	681b      	ldr	r3, [r3, #0]
10002138:	226c      	movs	r2, #108	; 0x6c
1000213a:	5c9b      	ldrb	r3, [r3, r2]
1000213c:	2b00      	cmp	r3, #0
1000213e:	d00e      	beq.n	1000215e <PWM_CCU8_lInit_GPIO+0x86>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
10002140:	687b      	ldr	r3, [r7, #4]
10002142:	681b      	ldr	r3, [r3, #0]
10002144:	6f19      	ldr	r1, [r3, #112]	; 0x70
10002146:	687b      	ldr	r3, [r7, #4]
10002148:	681b      	ldr	r3, [r3, #0]
1000214a:	2274      	movs	r2, #116	; 0x74
1000214c:	5c9a      	ldrb	r2, [r3, r2]
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
1000214e:	687b      	ldr	r3, [r7, #4]
10002150:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch1_out1_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out2_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out2_ptr, handle_ptr->config_ptr->gpio_ch2_out2_pin,
10002152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
10002154:	1c08      	adds	r0, r1, #0
10002156:	1c11      	adds	r1, r2, #0
10002158:	1c1a      	adds	r2, r3, #0
1000215a:	f7fe fff5 	bl	10001148 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
1000215e:	687b      	ldr	r3, [r7, #4]
10002160:	681b      	ldr	r3, [r3, #0]
10002162:	227c      	movs	r2, #124	; 0x7c
10002164:	5c9b      	ldrb	r3, [r3, r2]
10002166:	2b00      	cmp	r3, #0
10002168:	d00e      	beq.n	10002188 <PWM_CCU8_lInit_GPIO+0xb0>
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
1000216a:	687b      	ldr	r3, [r7, #4]
1000216c:	681b      	ldr	r3, [r3, #0]
1000216e:	2280      	movs	r2, #128	; 0x80
10002170:	5898      	ldr	r0, [r3, r2]
10002172:	687b      	ldr	r3, [r7, #4]
10002174:	681b      	ldr	r3, [r3, #0]
10002176:	2284      	movs	r2, #132	; 0x84
10002178:	5c99      	ldrb	r1, [r3, r2]
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
1000217a:	687b      	ldr	r3, [r7, #4]
1000217c:	681b      	ldr	r3, [r3, #0]
                  handle_ptr->config_ptr->gpio_ch2_out2_config_ptr);
  }

  if ((bool) true == handle_ptr->config_ptr->gpio_ch2_out3_enable)
  {
    XMC_GPIO_Init(handle_ptr->config_ptr->gpio_ch2_out3_ptr, handle_ptr->config_ptr->gpio_ch2_out3_pin,
1000217e:	2288      	movs	r2, #136	; 0x88
10002180:	589b      	ldr	r3, [r3, r2]
10002182:	1c1a      	adds	r2, r3, #0
10002184:	f7fe ffe0 	bl	10001148 <XMC_GPIO_Init>
                  handle_ptr->config_ptr->gpio_ch2_out3_config_ptr);
  }
}
10002188:	46bd      	mov	sp, r7
1000218a:	b002      	add	sp, #8
1000218c:	bd80      	pop	{r7, pc}
1000218e:	46c0      	nop			; (mov r8, r8)

10002190 <PWM_CCU8_lConfigure_Events>:

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
10002190:	b590      	push	{r4, r7, lr}
10002192:	b085      	sub	sp, #20
10002194:	af02      	add	r7, sp, #8
10002196:	6078      	str	r0, [r7, #4]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
10002198:	687b      	ldr	r3, [r7, #4]
1000219a:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event0_config_ptr);
1000219c:	687b      	ldr	r3, [r7, #4]
1000219e:	681b      	ldr	r3, [r3, #0]
}

static void PWM_CCU8_lConfigure_Events(PWM_CCU8_t* handle_ptr)
{
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
100021a0:	69db      	ldr	r3, [r3, #28]
100021a2:	1c10      	adds	r0, r2, #0
100021a4:	2101      	movs	r1, #1
100021a6:	1c1a      	adds	r2, r3, #0
100021a8:	f7ff fc50 	bl	10001a4c <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
100021ac:	687b      	ldr	r3, [r7, #4]
100021ae:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event1_config_ptr);
100021b0:	687b      	ldr	r3, [r7, #4]
100021b2:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 0 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_0,
                                handle_ptr->config_ptr->event0_config_ptr);

  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
100021b4:	6a1b      	ldr	r3, [r3, #32]
100021b6:	1c10      	adds	r0, r2, #0
100021b8:	2102      	movs	r1, #2
100021ba:	1c1a      	adds	r2, r3, #0
100021bc:	f7ff fc46 	bl	10001a4c <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
100021c0:	687b      	ldr	r3, [r7, #4]
100021c2:	689a      	ldr	r2, [r3, #8]
                                handle_ptr->config_ptr->event2_config_ptr);
100021c4:	687b      	ldr	r3, [r7, #4]
100021c6:	681b      	ldr	r3, [r3, #0]
  /* Configure slice to a external event 1 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_1,
                                handle_ptr->config_ptr->event1_config_ptr);

  /* Configure slice to a external event 2 */
  XMC_CCU8_SLICE_ConfigureEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_EVENT_2,
100021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100021ca:	1c10      	adds	r0, r2, #0
100021cc:	2103      	movs	r1, #3
100021ce:	1c1a      	adds	r2, r3, #0
100021d0:	f7ff fc3c 	bl	10001a4c <XMC_CCU8_SLICE_ConfigureEvent>
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
100021d4:	687b      	ldr	r3, [r7, #4]
100021d6:	681b      	ldr	r3, [r3, #0]
100021d8:	2228      	movs	r2, #40	; 0x28
100021da:	5c9b      	ldrb	r3, [r3, r2]
100021dc:	2b00      	cmp	r3, #0
100021de:	d00c      	beq.n	100021fa <PWM_CCU8_lConfigure_Events+0x6a>
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
100021e0:	687b      	ldr	r3, [r7, #4]
100021e2:	6898      	ldr	r0, [r3, #8]
100021e4:	687b      	ldr	r3, [r7, #4]
100021e6:	681b      	ldr	r3, [r3, #0]
100021e8:	2228      	movs	r2, #40	; 0x28
100021ea:	5c99      	ldrb	r1, [r3, r2]
                               handle_ptr->config_ptr->ext_start_mode);
100021ec:	687b      	ldr	r3, [r7, #4]
100021ee:	681b      	ldr	r3, [r3, #0]
                                handle_ptr->config_ptr->event2_config_ptr);

  /* External signal controls start of the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_start_event)
  {
    XMC_CCU8_SLICE_StartConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_start_event,
100021f0:	2229      	movs	r2, #41	; 0x29
100021f2:	5c9b      	ldrb	r3, [r3, r2]
100021f4:	1c1a      	adds	r2, r3, #0
100021f6:	f7ff fa15 	bl	10001624 <XMC_CCU8_SLICE_StartConfig>
                               handle_ptr->config_ptr->ext_start_mode);
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
100021fa:	687b      	ldr	r3, [r7, #4]
100021fc:	681b      	ldr	r3, [r3, #0]
100021fe:	222a      	movs	r2, #42	; 0x2a
10002200:	5c9b      	ldrb	r3, [r3, r2]
10002202:	2b00      	cmp	r3, #0
10002204:	d00c      	beq.n	10002220 <PWM_CCU8_lConfigure_Events+0x90>
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
10002206:	687b      	ldr	r3, [r7, #4]
10002208:	6898      	ldr	r0, [r3, #8]
1000220a:	687b      	ldr	r3, [r7, #4]
1000220c:	681b      	ldr	r3, [r3, #0]
1000220e:	222a      	movs	r2, #42	; 0x2a
10002210:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_stop_mode);
10002212:	687b      	ldr	r3, [r7, #4]
10002214:	681b      	ldr	r3, [r3, #0]
  }

  /* External signal can stop the timer */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_stop_event)
  {
    XMC_CCU8_SLICE_StopConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_stop_event,
10002216:	222b      	movs	r2, #43	; 0x2b
10002218:	5c9b      	ldrb	r3, [r3, r2]
1000221a:	1c1a      	adds	r2, r3, #0
1000221c:	f7ff fa36 	bl	1000168c <XMC_CCU8_SLICE_StopConfig>
                              handle_ptr->config_ptr->ext_stop_mode);
  }

  /* External signal can change the timer counting direction */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_dir_event)
10002220:	687b      	ldr	r3, [r7, #4]
10002222:	681b      	ldr	r3, [r3, #0]
10002224:	222c      	movs	r2, #44	; 0x2c
10002226:	5c9b      	ldrb	r3, [r3, r2]
10002228:	2b00      	cmp	r3, #0
1000222a:	d009      	beq.n	10002240 <PWM_CCU8_lConfigure_Events+0xb0>
  {
    XMC_CCU8_SLICE_DirectionConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_dir_event);
1000222c:	687b      	ldr	r3, [r7, #4]
1000222e:	6899      	ldr	r1, [r3, #8]
10002230:	687b      	ldr	r3, [r7, #4]
10002232:	681b      	ldr	r3, [r3, #0]
10002234:	222c      	movs	r2, #44	; 0x2c
10002236:	5c9b      	ldrb	r3, [r3, r2]
10002238:	1c08      	adds	r0, r1, #0
1000223a:	1c19      	adds	r1, r3, #0
1000223c:	f7ff fb1e 	bl	1000187c <XMC_CCU8_SLICE_DirectionConfig>
  }
  /* External signal can stop the timer and the timer value remains same */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_gate_event)
10002240:	687b      	ldr	r3, [r7, #4]
10002242:	681b      	ldr	r3, [r3, #0]
10002244:	222d      	movs	r2, #45	; 0x2d
10002246:	5c9b      	ldrb	r3, [r3, r2]
10002248:	2b00      	cmp	r3, #0
1000224a:	d009      	beq.n	10002260 <PWM_CCU8_lConfigure_Events+0xd0>
  {
    XMC_CCU8_SLICE_GateConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_gate_event);
1000224c:	687b      	ldr	r3, [r7, #4]
1000224e:	6899      	ldr	r1, [r3, #8]
10002250:	687b      	ldr	r3, [r7, #4]
10002252:	681b      	ldr	r3, [r3, #0]
10002254:	222d      	movs	r2, #45	; 0x2d
10002256:	5c9b      	ldrb	r3, [r3, r2]
10002258:	1c08      	adds	r0, r1, #0
1000225a:	1c19      	adds	r1, r3, #0
1000225c:	f7ff faf2 	bl	10001844 <XMC_CCU8_SLICE_GateConfig>
  }
  /* Timer increments on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_count_event)
10002260:	687b      	ldr	r3, [r7, #4]
10002262:	681b      	ldr	r3, [r3, #0]
10002264:	222e      	movs	r2, #46	; 0x2e
10002266:	5c9b      	ldrb	r3, [r3, r2]
10002268:	2b00      	cmp	r3, #0
1000226a:	d009      	beq.n	10002280 <PWM_CCU8_lConfigure_Events+0xf0>
  {
    XMC_CCU8_SLICE_CountConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_count_event);
1000226c:	687b      	ldr	r3, [r7, #4]
1000226e:	6899      	ldr	r1, [r3, #8]
10002270:	687b      	ldr	r3, [r7, #4]
10002272:	681b      	ldr	r3, [r3, #0]
10002274:	222e      	movs	r2, #46	; 0x2e
10002276:	5c9b      	ldrb	r3, [r3, r2]
10002278:	1c08      	adds	r0, r1, #0
1000227a:	1c19      	adds	r1, r3, #0
1000227c:	f7ff fac6 	bl	1000180c <XMC_CCU8_SLICE_CountConfig>
  }
  /* Timer gets loaded with compare register value or period register value on external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_load_event)
10002280:	687b      	ldr	r3, [r7, #4]
10002282:	681b      	ldr	r3, [r3, #0]
10002284:	222f      	movs	r2, #47	; 0x2f
10002286:	5c9b      	ldrb	r3, [r3, r2]
10002288:	2b00      	cmp	r3, #0
1000228a:	d013      	beq.n	100022b4 <PWM_CCU8_lConfigure_Events+0x124>
  {
    XMC_CCU8_SLICE_LoadConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_event);
1000228c:	687b      	ldr	r3, [r7, #4]
1000228e:	6899      	ldr	r1, [r3, #8]
10002290:	687b      	ldr	r3, [r7, #4]
10002292:	681b      	ldr	r3, [r3, #0]
10002294:	222f      	movs	r2, #47	; 0x2f
10002296:	5c9b      	ldrb	r3, [r3, r2]
10002298:	1c08      	adds	r0, r1, #0
1000229a:	1c19      	adds	r1, r3, #0
1000229c:	f7ff fa28 	bl	100016f0 <XMC_CCU8_SLICE_LoadConfig>
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
100022a0:	687b      	ldr	r3, [r7, #4]
100022a2:	6899      	ldr	r1, [r3, #8]
100022a4:	687b      	ldr	r3, [r7, #4]
100022a6:	681b      	ldr	r3, [r3, #0]
100022a8:	2230      	movs	r2, #48	; 0x30
100022aa:	5c9b      	ldrb	r3, [r3, r2]
100022ac:	1c08      	adds	r0, r1, #0
100022ae:	1c19      	adds	r1, r3, #0
100022b0:	f7ff fa3a 	bl	10001728 <XMC_CCU8_SLICE_LoadSelector>
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
100022b4:	687b      	ldr	r3, [r7, #4]
100022b6:	681b      	ldr	r3, [r3, #0]
100022b8:	2231      	movs	r2, #49	; 0x31
100022ba:	5c9b      	ldrb	r3, [r3, r2]
100022bc:	2b00      	cmp	r3, #0
100022be:	d012      	beq.n	100022e6 <PWM_CCU8_lConfigure_Events+0x156>
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
100022c0:	687b      	ldr	r3, [r7, #4]
100022c2:	6898      	ldr	r0, [r3, #8]
100022c4:	687b      	ldr	r3, [r7, #4]
100022c6:	681b      	ldr	r3, [r3, #0]
100022c8:	2231      	movs	r2, #49	; 0x31
100022ca:	5c99      	ldrb	r1, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
100022cc:	687b      	ldr	r3, [r7, #4]
100022ce:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
100022d0:	2232      	movs	r2, #50	; 0x32
100022d2:	5c9c      	ldrb	r4, [r3, r2]
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
100022d4:	687b      	ldr	r3, [r7, #4]
100022d6:	681b      	ldr	r3, [r3, #0]
    XMC_CCU8_SLICE_LoadSelector(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_load_selector);
  }
  /* External signal PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_mod_event)
  {
    XMC_CCU8_SLICE_ModulationConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_mod_event,
100022d8:	2233      	movs	r2, #51	; 0x33
100022da:	5c9b      	ldrb	r3, [r3, r2]
100022dc:	9300      	str	r3, [sp, #0]
100022de:	1c22      	adds	r2, r4, #0
100022e0:	2303      	movs	r3, #3
100022e2:	f7ff fa3b 	bl	1000175c <XMC_CCU8_SLICE_ModulationConfig>
                                    handle_ptr->config_ptr->ext_mod_mode, XMC_CCU8_SLICE_MODULATION_CHANNEL_1_AND_2,
                                    handle_ptr->config_ptr->ext_mod_sync);
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
100022e6:	687b      	ldr	r3, [r7, #4]
100022e8:	681b      	ldr	r3, [r3, #0]
100022ea:	2237      	movs	r2, #55	; 0x37
100022ec:	5c9b      	ldrb	r3, [r3, r2]
100022ee:	2b03      	cmp	r3, #3
100022f0:	d118      	bne.n	10002324 <PWM_CCU8_lConfigure_Events+0x194>
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
100022f2:	687b      	ldr	r3, [r7, #4]
100022f4:	6898      	ldr	r0, [r3, #8]
100022f6:	687b      	ldr	r3, [r7, #4]
100022f8:	681b      	ldr	r3, [r3, #0]
100022fa:	2239      	movs	r2, #57	; 0x39
100022fc:	5c99      	ldrb	r1, [r3, r2]
                              handle_ptr->config_ptr->ext_trap_sync);
100022fe:	687b      	ldr	r3, [r7, #4]
10002300:	681b      	ldr	r3, [r3, #0]
  }

  /* PWM signal (ST bit) output gets modulated by external signal */
  if (XMC_CCU8_SLICE_EVENT_2 == handle_ptr->config_ptr->ext_trap_event)
  {
    XMC_CCU8_SLICE_TrapConfig(handle_ptr->ccu8_slice_ptr, handle_ptr->config_ptr->ext_trap_exit,
10002302:	2238      	movs	r2, #56	; 0x38
10002304:	5c9b      	ldrb	r3, [r3, r2]
10002306:	1c1a      	adds	r2, r3, #0
10002308:	f7ff faec 	bl	100018e4 <XMC_CCU8_SLICE_TrapConfig>
                              handle_ptr->config_ptr->ext_trap_sync);
    if ((bool) true == handle_ptr->config_ptr->ext_trap_enable)
1000230c:	687b      	ldr	r3, [r7, #4]
1000230e:	681b      	ldr	r3, [r3, #0]
10002310:	2236      	movs	r2, #54	; 0x36
10002312:	5c9b      	ldrb	r3, [r3, r2]
10002314:	2b00      	cmp	r3, #0
10002316:	d005      	beq.n	10002324 <PWM_CCU8_lConfigure_Events+0x194>
    {
      XMC_CCU8_SLICE_EnableTrap(
10002318:	687b      	ldr	r3, [r7, #4]
1000231a:	689b      	ldr	r3, [r3, #8]
1000231c:	1c18      	adds	r0, r3, #0
1000231e:	210f      	movs	r1, #15
10002320:	f7ff fcf4 	bl	10001d0c <XMC_CCU8_SLICE_EnableTrap>
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
10002324:	687b      	ldr	r3, [r7, #4]
10002326:	681b      	ldr	r3, [r3, #0]
10002328:	2234      	movs	r2, #52	; 0x34
1000232a:	5c9b      	ldrb	r3, [r3, r2]
1000232c:	2b00      	cmp	r3, #0
1000232e:	d105      	bne.n	1000233c <PWM_CCU8_lConfigure_Events+0x1ac>
      != handle_ptr->config_ptr->ext_override_level_event))
10002330:	687b      	ldr	r3, [r7, #4]
10002332:	681b      	ldr	r3, [r3, #0]
10002334:	2235      	movs	r2, #53	; 0x35
10002336:	5c9b      	ldrb	r3, [r3, r2]
          (uint32_t)(XMC_CCU8_SLICE_OUTPUT_0 | XMC_CCU8_SLICE_OUTPUT_1 | XMC_CCU8_SLICE_OUTPUT_2 | XMC_CCU8_SLICE_OUTPUT_3)
		  );
    }
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
10002338:	2b00      	cmp	r3, #0
1000233a:	d011      	beq.n	10002360 <PWM_CCU8_lConfigure_Events+0x1d0>
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
1000233c:	687b      	ldr	r3, [r7, #4]
1000233e:	6899      	ldr	r1, [r3, #8]
                                                   handle_ptr->config_ptr->event1_config_ptr,
10002340:	687b      	ldr	r3, [r7, #4]
10002342:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
10002344:	6a1a      	ldr	r2, [r3, #32]
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
10002346:	687b      	ldr	r3, [r7, #4]
10002348:	681b      	ldr	r3, [r3, #0]
  }

  if ((XMC_CCU8_SLICE_EVENT_NONE != handle_ptr->config_ptr->ext_override_edge_event) || (XMC_CCU8_SLICE_EVENT_NONE
      != handle_ptr->config_ptr->ext_override_level_event))
  {
    XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent(handle_ptr->ccu8_slice_ptr,
1000234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000234c:	1c08      	adds	r0, r1, #0
1000234e:	1c11      	adds	r1, r2, #0
10002350:	1c1a      	adds	r2, r3, #0
10002352:	f7ff fb0d 	bl	10001970 <XMC_CCU8_SLICE_ConfigureStatusBitOverrideEvent>
                                                   handle_ptr->config_ptr->event1_config_ptr,
                                                   handle_ptr->config_ptr->event2_config_ptr);
    XMC_CCU8_SLICE_StatusBitOverrideConfig(handle_ptr->ccu8_slice_ptr);
10002356:	687b      	ldr	r3, [r7, #4]
10002358:	689b      	ldr	r3, [r3, #8]
1000235a:	1c18      	adds	r0, r3, #0
1000235c:	f7ff faaa 	bl	100018b4 <XMC_CCU8_SLICE_StatusBitOverrideConfig>
  }

}
10002360:	46bd      	mov	sp, r7
10002362:	b003      	add	sp, #12
10002364:	bd90      	pop	{r4, r7, pc}
10002366:	46c0      	nop			; (mov r8, r8)

10002368 <PWM_CCU8_Start>:
/**********************************************************************************************************/
/*Starts the CCU8_CC8 slice. This needs to be called even if external start is configured.*/
PWM_CCU8_STATUS_t PWM_CCU8_Start(PWM_CCU8_t* handle_ptr)
{
10002368:	b580      	push	{r7, lr}
1000236a:	b084      	sub	sp, #16
1000236c:	af00      	add	r7, sp, #0
1000236e:	6078      	str	r0, [r7, #4]
  PWM_CCU8_STATUS_t status;

  status = PWM_CCU8_STATUS_FAILURE;
10002370:	230f      	movs	r3, #15
10002372:	18fb      	adds	r3, r7, r3
10002374:	2201      	movs	r2, #1
10002376:	701a      	strb	r2, [r3, #0]
  XMC_ASSERT("PWM_CCU8_Start:handle_ptr NULL", (handle_ptr != NULL));
  if ((PWM_CCU8_STATE_INITIALIZED == handle_ptr->state) || (PWM_CCU8_STATE_STOPPED == handle_ptr->state))
10002378:	687b      	ldr	r3, [r7, #4]
1000237a:	7f1b      	ldrb	r3, [r3, #28]
1000237c:	2b01      	cmp	r3, #1
1000237e:	d003      	beq.n	10002388 <PWM_CCU8_Start+0x20>
10002380:	687b      	ldr	r3, [r7, #4]
10002382:	7f1b      	ldrb	r3, [r3, #28]
10002384:	2b03      	cmp	r3, #3
10002386:	d119      	bne.n	100023bc <PWM_CCU8_Start+0x54>
  {
    /* clear IDLE mode for the slice; Start timer */
    XMC_CCU8_EnableClock(handle_ptr->ccu8_module_ptr, handle_ptr->slice_number);
10002388:	687b      	ldr	r3, [r7, #4]
1000238a:	685a      	ldr	r2, [r3, #4]
1000238c:	687b      	ldr	r3, [r7, #4]
1000238e:	7b5b      	ldrb	r3, [r3, #13]
10002390:	1c10      	adds	r0, r2, #0
10002392:	1c19      	adds	r1, r3, #0
10002394:	f7ff fcaa 	bl	10001cec <XMC_CCU8_EnableClock>

    if (XMC_CCU8_SLICE_EVENT_NONE == handle_ptr->config_ptr->ext_start_event)
10002398:	687b      	ldr	r3, [r7, #4]
1000239a:	681b      	ldr	r3, [r3, #0]
1000239c:	2228      	movs	r2, #40	; 0x28
1000239e:	5c9b      	ldrb	r3, [r3, r2]
100023a0:	2b00      	cmp	r3, #0
100023a2:	d104      	bne.n	100023ae <PWM_CCU8_Start+0x46>
    {
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
100023a4:	687b      	ldr	r3, [r7, #4]
100023a6:	689b      	ldr	r3, [r3, #8]
100023a8:	1c18      	adds	r0, r3, #0
100023aa:	f7ff fcbf 	bl	10001d2c <XMC_CCU8_SLICE_StartTimer>
    }

    handle_ptr->state = PWM_CCU8_STATE_RUNNING;
100023ae:	687b      	ldr	r3, [r7, #4]
100023b0:	2202      	movs	r2, #2
100023b2:	771a      	strb	r2, [r3, #28]
    status = PWM_CCU8_STATUS_SUCCESS;
100023b4:	230f      	movs	r3, #15
100023b6:	18fb      	adds	r3, r7, r3
100023b8:	2200      	movs	r2, #0
100023ba:	701a      	strb	r2, [r3, #0]
    XMC_DEBUG("PWM_CCU8_Start:start PWM");
  }
  return (status);
100023bc:	230f      	movs	r3, #15
100023be:	18fb      	adds	r3, r7, r3
100023c0:	781b      	ldrb	r3, [r3, #0]
} /* end of PWM_CCU8_Start() api */
100023c2:	1c18      	adds	r0, r3, #0
100023c4:	46bd      	mov	sp, r7
100023c6:	b004      	add	sp, #16
100023c8:	bd80      	pop	{r7, pc}
100023ca:	46c0      	nop			; (mov r8, r8)

100023cc <PWM_CCU8_SetFreqAsymmetric>:

/**********************************************************************************************************/

/*Sets the frequency for CCU8_CC8 slice Asymmetric Mode. */
PWM_CCU8_STATUS_t PWM_CCU8_SetFreqAsymmetric(PWM_CCU8_t* handle_ptr, uint32_t pwm_freq_hz)
{
100023cc:	b580      	push	{r7, lr}
100023ce:	b08a      	sub	sp, #40	; 0x28
100023d0:	af00      	add	r7, sp, #0
100023d2:	6078      	str	r0, [r7, #4]
100023d4:	6039      	str	r1, [r7, #0]
  uint32_t duty_cycle;
  uint32_t shift;
  uint32_t compare_ch1;
  uint32_t compare_ch2;

  status = PWM_CCU8_STATUS_FAILURE;
100023d6:	2327      	movs	r3, #39	; 0x27
100023d8:	18fb      	adds	r3, r7, r3
100023da:	2201      	movs	r2, #1
100023dc:	701a      	strb	r2, [r3, #0]
  frequency_tclk = 0U;
100023de:	2300      	movs	r3, #0
100023e0:	623b      	str	r3, [r7, #32]
  XMC_ASSERT("PWM_CCU8_SetFreqAsymmetric:handle_ptr NULL", (handle_ptr != NULL));
  if (PWM_CCU8_STATE_UNINITIALIZED != handle_ptr->state)
100023e2:	687b      	ldr	r3, [r7, #4]
100023e4:	7f1b      	ldrb	r3, [r3, #28]
100023e6:	2b00      	cmp	r3, #0
100023e8:	d100      	bne.n	100023ec <PWM_CCU8_SetFreqAsymmetric+0x20>
100023ea:	e0b0      	b.n	1000254e <PWM_CCU8_SetFreqAsymmetric+0x182>
  {
    if (0U == pwm_freq_hz)
100023ec:	683b      	ldr	r3, [r7, #0]
100023ee:	2b00      	cmp	r3, #0
100023f0:	d100      	bne.n	100023f4 <PWM_CCU8_SetFreqAsymmetric+0x28>
100023f2:	e0ac      	b.n	1000254e <PWM_CCU8_SetFreqAsymmetric+0x182>
    {
      XMC_DEBUG("PWM_CCU8_SetPwmFreq:cannot set frequency 0Hz");
    }
    else
    {
      frequency_tclk = handle_ptr->frequency_tclk;
100023f4:	687b      	ldr	r3, [r7, #4]
100023f6:	6a1b      	ldr	r3, [r3, #32]
100023f8:	623b      	str	r3, [r7, #32]
      period = frequency_tclk / pwm_freq_hz;
100023fa:	6a38      	ldr	r0, [r7, #32]
100023fc:	6839      	ldr	r1, [r7, #0]
100023fe:	f7ff fc49 	bl	10001c94 <__aeabi_uidiv>
10002402:	1c03      	adds	r3, r0, #0
10002404:	61fb      	str	r3, [r7, #28]

      duty_cycle = handle_ptr->asym_duty;
10002406:	687b      	ldr	r3, [r7, #4]
10002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000240a:	61bb      	str	r3, [r7, #24]
      shift = handle_ptr->asym_shift;
1000240c:	687b      	ldr	r3, [r7, #4]
1000240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002410:	617b      	str	r3, [r7, #20]

      if ((uint32_t) XMC_CCU8_SLICE_TIMER_COUNT_MODE_CA == handle_ptr->config_ptr->ccu8_cc8_slice_timer_ptr->timer_mode)
10002412:	687b      	ldr	r3, [r7, #4]
10002414:	681b      	ldr	r3, [r3, #0]
10002416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002418:	781b      	ldrb	r3, [r3, #0]
1000241a:	2201      	movs	r2, #1
1000241c:	4013      	ands	r3, r2
1000241e:	b2db      	uxtb	r3, r3
10002420:	2b00      	cmp	r3, #0
10002422:	d050      	beq.n	100024c6 <PWM_CCU8_SetFreqAsymmetric+0xfa>
      {
        period = period >> 1U;/*divide by 2*/
10002424:	69fb      	ldr	r3, [r7, #28]
10002426:	085b      	lsrs	r3, r3, #1
10002428:	61fb      	str	r3, [r7, #28]

        if ((period != 0U) && (period <= PWM_CCU8_MAX_TIMER_COUNT))
1000242a:	69fb      	ldr	r3, [r7, #28]
1000242c:	2b00      	cmp	r3, #0
1000242e:	d100      	bne.n	10002432 <PWM_CCU8_SetFreqAsymmetric+0x66>
10002430:	e08d      	b.n	1000254e <PWM_CCU8_SetFreqAsymmetric+0x182>
10002432:	69fb      	ldr	r3, [r7, #28]
10002434:	4a49      	ldr	r2, [pc, #292]	; (1000255c <PWM_CCU8_SetFreqAsymmetric+0x190>)
10002436:	4293      	cmp	r3, r2
10002438:	d900      	bls.n	1000243c <PWM_CCU8_SetFreqAsymmetric+0x70>
1000243a:	e088      	b.n	1000254e <PWM_CCU8_SetFreqAsymmetric+0x182>
        {
          compare_ch1 = (2U * period * shift);
1000243c:	69fb      	ldr	r3, [r7, #28]
1000243e:	697a      	ldr	r2, [r7, #20]
10002440:	4353      	muls	r3, r2
10002442:	005b      	lsls	r3, r3, #1
10002444:	613b      	str	r3, [r7, #16]
          compare_ch1 = compare_ch1 / PWM_CCU8_DUTY_FULL_SCALE;
10002446:	693b      	ldr	r3, [r7, #16]
10002448:	1c18      	adds	r0, r3, #0
1000244a:	4945      	ldr	r1, [pc, #276]	; (10002560 <PWM_CCU8_SetFreqAsymmetric+0x194>)
1000244c:	f7ff fc22 	bl	10001c94 <__aeabi_uidiv>
10002450:	1c03      	adds	r3, r0, #0
10002452:	613b      	str	r3, [r7, #16]
          compare_ch2 = (2U * period * (PWM_CCU8_DUTY_FULL_SCALE - (shift + duty_cycle)));
10002454:	697a      	ldr	r2, [r7, #20]
10002456:	69bb      	ldr	r3, [r7, #24]
10002458:	18d3      	adds	r3, r2, r3
1000245a:	4a41      	ldr	r2, [pc, #260]	; (10002560 <PWM_CCU8_SetFreqAsymmetric+0x194>)
1000245c:	1ad3      	subs	r3, r2, r3
1000245e:	69fa      	ldr	r2, [r7, #28]
10002460:	4353      	muls	r3, r2
10002462:	005b      	lsls	r3, r3, #1
10002464:	60fb      	str	r3, [r7, #12]
          compare_ch2 = compare_ch2 / PWM_CCU8_DUTY_FULL_SCALE;
10002466:	68fb      	ldr	r3, [r7, #12]
10002468:	1c18      	adds	r0, r3, #0
1000246a:	493d      	ldr	r1, [pc, #244]	; (10002560 <PWM_CCU8_SetFreqAsymmetric+0x194>)
1000246c:	f7ff fc12 	bl	10001c94 <__aeabi_uidiv>
10002470:	1c03      	adds	r3, r0, #0
10002472:	60fb      	str	r3, [r7, #12]

          XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period - 1U));
10002474:	687b      	ldr	r3, [r7, #4]
10002476:	689a      	ldr	r2, [r3, #8]
10002478:	69fb      	ldr	r3, [r7, #28]
1000247a:	b29b      	uxth	r3, r3
1000247c:	3b01      	subs	r3, #1
1000247e:	b29b      	uxth	r3, r3
10002480:	1c10      	adds	r0, r2, #0
10002482:	1c19      	adds	r1, r3, #0
10002484:	f7ff fb70 	bl	10001b68 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
          XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
10002488:	687b      	ldr	r3, [r7, #4]
1000248a:	689a      	ldr	r2, [r3, #8]
1000248c:	693b      	ldr	r3, [r7, #16]
1000248e:	b29b      	uxth	r3, r3
10002490:	1c10      	adds	r0, r2, #0
10002492:	2100      	movs	r1, #0
10002494:	1c1a      	adds	r2, r3, #0
10002496:	f7ff fb75 	bl	10001b84 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                              (uint16_t) compare_ch1);
          XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
1000249a:	687b      	ldr	r3, [r7, #4]
1000249c:	689a      	ldr	r2, [r3, #8]
1000249e:	68fb      	ldr	r3, [r7, #12]
100024a0:	b29b      	uxth	r3, r3
100024a2:	1c10      	adds	r0, r2, #0
100024a4:	2101      	movs	r1, #1
100024a6:	1c1a      	adds	r2, r3, #0
100024a8:	f7ff fb6c 	bl	10001b84 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                              (uint16_t) compare_ch2);
          XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
100024ac:	687b      	ldr	r3, [r7, #4]
100024ae:	685a      	ldr	r2, [r3, #4]
100024b0:	687b      	ldr	r3, [r7, #4]
100024b2:	691b      	ldr	r3, [r3, #16]
100024b4:	1c10      	adds	r0, r2, #0
100024b6:	1c19      	adds	r1, r3, #0
100024b8:	f7ff fc42 	bl	10001d40 <XMC_CCU8_EnableShadowTransfer>
          XMC_DEBUG("PWM_CCU8_SetPwmFreq:frequency set center aligned mode");
          status = PWM_CCU8_STATUS_SUCCESS;
100024bc:	2327      	movs	r3, #39	; 0x27
100024be:	18fb      	adds	r3, r7, r3
100024c0:	2200      	movs	r2, #0
100024c2:	701a      	strb	r2, [r3, #0]
100024c4:	e043      	b.n	1000254e <PWM_CCU8_SetFreqAsymmetric+0x182>
        }
      }
      else
      {
        if (period <= PWM_CCU8_MAX_TIMER_COUNT)
100024c6:	69fb      	ldr	r3, [r7, #28]
100024c8:	4a24      	ldr	r2, [pc, #144]	; (1000255c <PWM_CCU8_SetFreqAsymmetric+0x190>)
100024ca:	4293      	cmp	r3, r2
100024cc:	d83f      	bhi.n	1000254e <PWM_CCU8_SetFreqAsymmetric+0x182>
        {
          compare_ch1 = period * shift;
100024ce:	69fb      	ldr	r3, [r7, #28]
100024d0:	697a      	ldr	r2, [r7, #20]
100024d2:	4353      	muls	r3, r2
100024d4:	613b      	str	r3, [r7, #16]
          compare_ch1 = compare_ch1 / PWM_CCU8_DUTY_FULL_SCALE;
100024d6:	693b      	ldr	r3, [r7, #16]
100024d8:	1c18      	adds	r0, r3, #0
100024da:	4921      	ldr	r1, [pc, #132]	; (10002560 <PWM_CCU8_SetFreqAsymmetric+0x194>)
100024dc:	f7ff fbda 	bl	10001c94 <__aeabi_uidiv>
100024e0:	1c03      	adds	r3, r0, #0
100024e2:	613b      	str	r3, [r7, #16]
          compare_ch2 = period * (shift + duty_cycle);
100024e4:	697a      	ldr	r2, [r7, #20]
100024e6:	69bb      	ldr	r3, [r7, #24]
100024e8:	18d3      	adds	r3, r2, r3
100024ea:	69fa      	ldr	r2, [r7, #28]
100024ec:	4353      	muls	r3, r2
100024ee:	60fb      	str	r3, [r7, #12]
          compare_ch2 = compare_ch2 / PWM_CCU8_DUTY_FULL_SCALE;
100024f0:	68fb      	ldr	r3, [r7, #12]
100024f2:	1c18      	adds	r0, r3, #0
100024f4:	491a      	ldr	r1, [pc, #104]	; (10002560 <PWM_CCU8_SetFreqAsymmetric+0x194>)
100024f6:	f7ff fbcd 	bl	10001c94 <__aeabi_uidiv>
100024fa:	1c03      	adds	r3, r0, #0
100024fc:	60fb      	str	r3, [r7, #12]

          XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, (uint16_t)(period - 1U));
100024fe:	687b      	ldr	r3, [r7, #4]
10002500:	689a      	ldr	r2, [r3, #8]
10002502:	69fb      	ldr	r3, [r7, #28]
10002504:	b29b      	uxth	r3, r3
10002506:	3b01      	subs	r3, #1
10002508:	b29b      	uxth	r3, r3
1000250a:	1c10      	adds	r0, r2, #0
1000250c:	1c19      	adds	r1, r3, #0
1000250e:	f7ff fb2b 	bl	10001b68 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
          XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
10002512:	687b      	ldr	r3, [r7, #4]
10002514:	689a      	ldr	r2, [r3, #8]
10002516:	693b      	ldr	r3, [r7, #16]
10002518:	b29b      	uxth	r3, r3
1000251a:	1c10      	adds	r0, r2, #0
1000251c:	2100      	movs	r1, #0
1000251e:	1c1a      	adds	r2, r3, #0
10002520:	f7ff fb30 	bl	10001b84 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                              (uint16_t) compare_ch1);
          XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_COMPARE_CHANNEL_2,
10002524:	687b      	ldr	r3, [r7, #4]
10002526:	689a      	ldr	r2, [r3, #8]
10002528:	68fb      	ldr	r3, [r7, #12]
1000252a:	b29b      	uxth	r3, r3
1000252c:	1c10      	adds	r0, r2, #0
1000252e:	2101      	movs	r1, #1
10002530:	1c1a      	adds	r2, r3, #0
10002532:	f7ff fb27 	bl	10001b84 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                              (uint16_t) compare_ch2);
          XMC_CCU8_EnableShadowTransfer(handle_ptr->ccu8_module_ptr, handle_ptr->shadow_txfr_msk);
10002536:	687b      	ldr	r3, [r7, #4]
10002538:	685a      	ldr	r2, [r3, #4]
1000253a:	687b      	ldr	r3, [r7, #4]
1000253c:	691b      	ldr	r3, [r3, #16]
1000253e:	1c10      	adds	r0, r2, #0
10002540:	1c19      	adds	r1, r3, #0
10002542:	f7ff fbfd 	bl	10001d40 <XMC_CCU8_EnableShadowTransfer>
          XMC_DEBUG("PWM_CCU8_SetPwmFreq:frequency set edge aligned mode");
          status = PWM_CCU8_STATUS_SUCCESS;
10002546:	2327      	movs	r3, #39	; 0x27
10002548:	18fb      	adds	r3, r7, r3
1000254a:	2200      	movs	r2, #0
1000254c:	701a      	strb	r2, [r3, #0]
        }
      }
    }
  }
  return (status);
1000254e:	2327      	movs	r3, #39	; 0x27
10002550:	18fb      	adds	r3, r7, r3
10002552:	781b      	ldrb	r3, [r3, #0]
}/* end of PWM_CCU8_SetFreqAsymmetric() api */
10002554:	1c18      	adds	r0, r3, #0
10002556:	46bd      	mov	sp, r7
10002558:	b00a      	add	sp, #40	; 0x28
1000255a:	bd80      	pop	{r7, pc}
1000255c:	0000ffff 	.word	0x0000ffff
10002560:	00002710 	.word	0x00002710

10002564 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
10002564:	b580      	push	{r7, lr}
10002566:	b082      	sub	sp, #8
10002568:	af00      	add	r7, sp, #0
1000256a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
1000256c:	687b      	ldr	r3, [r7, #4]
1000256e:	2280      	movs	r2, #128	; 0x80
10002570:	0052      	lsls	r2, r2, #1
10002572:	60da      	str	r2, [r3, #12]
}
10002574:	46bd      	mov	sp, r7
10002576:	b002      	add	sp, #8
10002578:	bd80      	pop	{r7, pc}
1000257a:	46c0      	nop			; (mov r8, r8)

1000257c <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
1000257c:	b580      	push	{r7, lr}
1000257e:	b082      	sub	sp, #8
10002580:	af00      	add	r7, sp, #0
10002582:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10002584:	687b      	ldr	r3, [r7, #4]
10002586:	7b5b      	ldrb	r3, [r3, #13]
10002588:	2201      	movs	r2, #1
1000258a:	4053      	eors	r3, r2
1000258c:	b2db      	uxtb	r3, r3
1000258e:	2b00      	cmp	r3, #0
10002590:	d00f      	beq.n	100025b2 <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
10002592:	687b      	ldr	r3, [r7, #4]
10002594:	689a      	ldr	r2, [r3, #8]
10002596:	687b      	ldr	r3, [r7, #4]
10002598:	7b1b      	ldrb	r3, [r3, #12]
1000259a:	1c10      	adds	r0, r2, #0
1000259c:	1c19      	adds	r1, r3, #0
1000259e:	f7fe ffc9 	bl	10001534 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
100025a2:	687b      	ldr	r3, [r7, #4]
100025a4:	689b      	ldr	r3, [r3, #8]
100025a6:	1c18      	adds	r0, r3, #0
100025a8:	f7ff ffdc 	bl	10002564 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
100025ac:	687b      	ldr	r3, [r7, #4]
100025ae:	2201      	movs	r2, #1
100025b0:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
100025b2:	2300      	movs	r3, #0
}
100025b4:	1c18      	adds	r0, r3, #0
100025b6:	46bd      	mov	sp, r7
100025b8:	b002      	add	sp, #8
100025ba:	bd80      	pop	{r7, pc}

100025bc <CLOCK_XMC1_Init>:

/*
 * API to initialize the CLOCK_XMC1 APP Interrupts
 */
CLOCK_XMC1_STATUS_t CLOCK_XMC1_Init(CLOCK_XMC1_t *handle)
{
100025bc:	b580      	push	{r7, lr}
100025be:	b084      	sub	sp, #16
100025c0:	af00      	add	r7, sp, #0
100025c2:	6078      	str	r0, [r7, #4]
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
100025c4:	230f      	movs	r3, #15
100025c6:	18fb      	adds	r3, r7, r3
100025c8:	2200      	movs	r2, #0
100025ca:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
100025cc:	230e      	movs	r3, #14
100025ce:	18fb      	adds	r3, r7, r3
100025d0:	2200      	movs	r2, #0
100025d2:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
100025d4:	230d      	movs	r3, #13
100025d6:	18fb      	adds	r3, r7, r3
100025d8:	2200      	movs	r2, #0
100025da:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
100025dc:	230c      	movs	r3, #12
100025de:	18fb      	adds	r3, r7, r3
100025e0:	2200      	movs	r2, #0
100025e2:	701a      	strb	r2, [r3, #0]
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
100025e4:	230b      	movs	r3, #11
100025e6:	18fb      	adds	r3, r7, r3
100025e8:	2200      	movs	r2, #0
100025ea:	701a      	strb	r2, [r3, #0]

  XMC_ASSERT("CLOCK_XMC1_Init: CLOCK_XMC1 APP handle pointer uninitialized", (handle != NULL));

  if (handle->init_status == false)
100025ec:	687b      	ldr	r3, [r7, #4]
100025ee:	781b      	ldrb	r3, [r3, #0]
100025f0:	2201      	movs	r2, #1
100025f2:	4053      	eors	r3, r2
100025f4:	b2db      	uxtb	r3, r3
100025f6:	2b00      	cmp	r3, #0
100025f8:	d01b      	beq.n	10002632 <CLOCK_XMC1_Init+0x76>

#endif
    }

#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
100025fa:	230e      	movs	r3, #14
100025fc:	18fa      	adds	r2, r7, r3
100025fe:	230d      	movs	r3, #13
10002600:	18fb      	adds	r3, r7, r3
10002602:	7812      	ldrb	r2, [r2, #0]
10002604:	781b      	ldrb	r3, [r3, #0]
10002606:	4313      	orrs	r3, r2
10002608:	b2da      	uxtb	r2, r3
1000260a:	230c      	movs	r3, #12
1000260c:	18fb      	adds	r3, r7, r3
1000260e:	781b      	ldrb	r3, [r3, #0]
10002610:	4313      	orrs	r3, r2
10002612:	b2d9      	uxtb	r1, r3
10002614:	230f      	movs	r3, #15
10002616:	18fb      	adds	r3, r7, r3
10002618:	220b      	movs	r2, #11
1000261a:	18ba      	adds	r2, r7, r2
1000261c:	7812      	ldrb	r2, [r2, #0]
1000261e:	430a      	orrs	r2, r1
10002620:	701a      	strb	r2, [r3, #0]
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
10002622:	230f      	movs	r3, #15
10002624:	18fb      	adds	r3, r7, r3
10002626:	781b      	ldrb	r3, [r3, #0]
10002628:	2b00      	cmp	r3, #0
1000262a:	d102      	bne.n	10002632 <CLOCK_XMC1_Init+0x76>
    {
      handle->init_status = true;
1000262c:	687b      	ldr	r3, [r7, #4]
1000262e:	2201      	movs	r2, #1
10002630:	701a      	strb	r2, [r3, #0]
    }
  }
  return (status);
10002632:	230f      	movs	r3, #15
10002634:	18fb      	adds	r3, r7, r3
10002636:	781b      	ldrb	r3, [r3, #0]
}
10002638:	1c18      	adds	r0, r3, #0
1000263a:	46bd      	mov	sp, r7
1000263c:	b004      	add	sp, #16
1000263e:	bd80      	pop	{r7, pc}

10002640 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10002640:	b590      	push	{r4, r7, lr}
10002642:	b085      	sub	sp, #20
10002644:	af00      	add	r7, sp, #0
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
10002646:	1d3b      	adds	r3, r7, #4
10002648:	4a04      	ldr	r2, [pc, #16]	; (1000265c <SystemCoreClockSetup+0x1c>)
1000264a:	ca13      	ldmia	r2!, {r0, r1, r4}
1000264c:	c313      	stmia	r3!, {r0, r1, r4}
  .idiv = 1U,  /**< 8 Bit integer divider */

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
1000264e:	1d3b      	adds	r3, r7, #4
10002650:	1c18      	adds	r0, r3, #0
10002652:	f7fe fe51 	bl	100012f8 <XMC_SCU_CLOCK_Init>
}
10002656:	46bd      	mov	sp, r7
10002658:	b005      	add	sp, #20
1000265a:	bd90      	pop	{r4, r7, pc}
1000265c:	10002868 	.word	0x10002868

10002660 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
10002660:	b590      	push	{r4, r7, lr}
10002662:	b083      	sub	sp, #12
10002664:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
10002666:	1dfb      	adds	r3, r7, #7
10002668:	2200      	movs	r2, #0
1000266a:	701a      	strb	r2, [r3, #0]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
1000266c:	1dfc      	adds	r4, r7, #7
1000266e:	4b0b      	ldr	r3, [pc, #44]	; (1000269c <DAVE_Init+0x3c>)
10002670:	1c18      	adds	r0, r3, #0
10002672:	f7ff ffa3 	bl	100025bc <CLOCK_XMC1_Init>
10002676:	1c03      	adds	r3, r0, #0
10002678:	7023      	strb	r3, [r4, #0]

  if (init_status == DAVE_STATUS_SUCCESS)
1000267a:	1dfb      	adds	r3, r7, #7
1000267c:	781b      	ldrb	r3, [r3, #0]
1000267e:	2b00      	cmp	r3, #0
10002680:	d106      	bne.n	10002690 <DAVE_Init+0x30>
  {
	 /**  Initialization of PWM_CCU8 APP instance PWM_CCU8_0 */
	 init_status = (DAVE_STATUS_t)PWM_CCU8_Init(&PWM_CCU8_0); 
10002682:	1dfc      	adds	r4, r7, #7
10002684:	4b06      	ldr	r3, [pc, #24]	; (100026a0 <DAVE_Init+0x40>)
10002686:	1c18      	adds	r0, r3, #0
10002688:	f7ff fb96 	bl	10001db8 <PWM_CCU8_Init>
1000268c:	1c03      	adds	r3, r0, #0
1000268e:	7023      	strb	r3, [r4, #0]
   }  
  return init_status;
10002690:	1dfb      	adds	r3, r7, #7
10002692:	781b      	ldrb	r3, [r3, #0]
} /**  End of function DAVE_Init */
10002694:	1c18      	adds	r0, r3, #0
10002696:	46bd      	mov	sp, r7
10002698:	b003      	add	sp, #12
1000269a:	bd90      	pop	{r4, r7, pc}
1000269c:	20000594 	.word	0x20000594
100026a0:	20000548 	.word	0x20000548

100026a4 <main>:
 * invoking the APP initialization dispatcher routine - DAVE_Init() and hosting the place-holder for user application
 * code.
 */

int main(void)
{
100026a4:	b590      	push	{r4, r7, lr}
100026a6:	b087      	sub	sp, #28
100026a8:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
100026aa:	230f      	movs	r3, #15
100026ac:	18fc      	adds	r4, r7, r3
100026ae:	f7ff ffd7 	bl	10002660 <DAVE_Init>
100026b2:	1c03      	adds	r3, r0, #0
100026b4:	7023      	strb	r3, [r4, #0]

  if (status != DAVE_STATUS_SUCCESS)
100026b6:	230f      	movs	r3, #15
100026b8:	18fb      	adds	r3, r7, r3
100026ba:	781b      	ldrb	r3, [r3, #0]
100026bc:	2b00      	cmp	r3, #0
100026be:	d000      	beq.n	100026c2 <main+0x1e>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
100026c0:	e7fe      	b.n	100026c0 <main+0x1c>
  }

  int duty_A=1000;
100026c2:	23fa      	movs	r3, #250	; 0xfa
100026c4:	009b      	lsls	r3, r3, #2
100026c6:	60bb      	str	r3, [r7, #8]
  int duty_B=9000;
100026c8:	4b10      	ldr	r3, [pc, #64]	; (1000270c <main+0x68>)
100026ca:	607b      	str	r3, [r7, #4]
  int duty=5000;
100026cc:	4b10      	ldr	r3, [pc, #64]	; (10002710 <main+0x6c>)
100026ce:	617b      	str	r3, [r7, #20]
  int i=0;
100026d0:	2300      	movs	r3, #0
100026d2:	613b      	str	r3, [r7, #16]

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
	  if(i==50000){
100026d4:	693b      	ldr	r3, [r7, #16]
100026d6:	4a0f      	ldr	r2, [pc, #60]	; (10002714 <main+0x70>)
100026d8:	4293      	cmp	r3, r2
100026da:	d101      	bne.n	100026e0 <main+0x3c>
		  duty=duty_A;
100026dc:	68bb      	ldr	r3, [r7, #8]
100026de:	617b      	str	r3, [r7, #20]
	  }
	  if(i==100000){
100026e0:	693b      	ldr	r3, [r7, #16]
100026e2:	4a0d      	ldr	r2, [pc, #52]	; (10002718 <main+0x74>)
100026e4:	4293      	cmp	r3, r2
100026e6:	d101      	bne.n	100026ec <main+0x48>
		  duty=duty_B;
100026e8:	687b      	ldr	r3, [r7, #4]
100026ea:	617b      	str	r3, [r7, #20]
	  }
	  if(i==150000){
100026ec:	693b      	ldr	r3, [r7, #16]
100026ee:	4a0b      	ldr	r2, [pc, #44]	; (1000271c <main+0x78>)
100026f0:	4293      	cmp	r3, r2
100026f2:	d101      	bne.n	100026f8 <main+0x54>
		  i=0;
100026f4:	2300      	movs	r3, #0
100026f6:	613b      	str	r3, [r7, #16]
	  }

	  PWM_CCU8_SetFreqAsymmetric(&PWM_CCU8_0, duty);
100026f8:	697b      	ldr	r3, [r7, #20]
100026fa:	4a09      	ldr	r2, [pc, #36]	; (10002720 <main+0x7c>)
100026fc:	1c10      	adds	r0, r2, #0
100026fe:	1c19      	adds	r1, r3, #0
10002700:	f7ff fe64 	bl	100023cc <PWM_CCU8_SetFreqAsymmetric>
	  i++;
10002704:	693b      	ldr	r3, [r7, #16]
10002706:	3301      	adds	r3, #1
10002708:	613b      	str	r3, [r7, #16]
  }
1000270a:	e7e3      	b.n	100026d4 <main+0x30>
1000270c:	00002328 	.word	0x00002328
10002710:	00001388 	.word	0x00001388
10002714:	0000c350 	.word	0x0000c350
10002718:	000186a0 	.word	0x000186a0
1000271c:	000249f0 	.word	0x000249f0
10002720:	20000548 	.word	0x20000548

10002724 <__libc_init_array>:
10002724:	4b0e      	ldr	r3, [pc, #56]	; (10002760 <__libc_init_array+0x3c>)
10002726:	b570      	push	{r4, r5, r6, lr}
10002728:	2500      	movs	r5, #0
1000272a:	1c1e      	adds	r6, r3, #0
1000272c:	4c0d      	ldr	r4, [pc, #52]	; (10002764 <__libc_init_array+0x40>)
1000272e:	1ae4      	subs	r4, r4, r3
10002730:	10a4      	asrs	r4, r4, #2
10002732:	42a5      	cmp	r5, r4
10002734:	d004      	beq.n	10002740 <__libc_init_array+0x1c>
10002736:	00ab      	lsls	r3, r5, #2
10002738:	58f3      	ldr	r3, [r6, r3]
1000273a:	4798      	blx	r3
1000273c:	3501      	adds	r5, #1
1000273e:	e7f8      	b.n	10002732 <__libc_init_array+0xe>
10002740:	f7ff fad0 	bl	10001ce4 <_init>
10002744:	4b08      	ldr	r3, [pc, #32]	; (10002768 <__libc_init_array+0x44>)
10002746:	2500      	movs	r5, #0
10002748:	1c1e      	adds	r6, r3, #0
1000274a:	4c08      	ldr	r4, [pc, #32]	; (1000276c <__libc_init_array+0x48>)
1000274c:	1ae4      	subs	r4, r4, r3
1000274e:	10a4      	asrs	r4, r4, #2
10002750:	42a5      	cmp	r5, r4
10002752:	d004      	beq.n	1000275e <__libc_init_array+0x3a>
10002754:	00ab      	lsls	r3, r5, #2
10002756:	58f3      	ldr	r3, [r6, r3]
10002758:	4798      	blx	r3
1000275a:	3501      	adds	r5, #1
1000275c:	e7f8      	b.n	10002750 <__libc_init_array+0x2c>
1000275e:	bd70      	pop	{r4, r5, r6, pc}
10002760:	2000058c 	.word	0x2000058c
10002764:	2000058c 	.word	0x2000058c
10002768:	2000058c 	.word	0x2000058c
1000276c:	2000058c 	.word	0x2000058c
10002770:	10001be6 	.word	0x10001be6
10002774:	10001be6 	.word	0x10001be6
10002778:	10001bf0 	.word	0x10001bf0
1000277c:	10001bf0 	.word	0x10001bf0
10002780:	10001bfa 	.word	0x10001bfa
10002784:	10001bfa 	.word	0x10001bfa
10002788:	10001c28 	.word	0x10001c28
1000278c:	10001c28 	.word	0x10001c28
10002790:	10001c04 	.word	0x10001c04
10002794:	10001c10 	.word	0x10001c10
10002798:	10001c1c 	.word	0x10001c1c
1000279c:	10001c1c 	.word	0x10001c1c

100027a0 <PWM_CCU8_0_timer_handle>:
	...
100027a8:	00000014 00000000                       ........

100027b0 <PWM_CCU8_0_event0_config>:
100027b0:	00010000                                ....

100027b4 <PWM_CCU8_0_event1_config>:
100027b4:	00010000                                ....

100027b8 <PWM_CCU8_0_event2_config>:
100027b8:	00010000                                ....

100027bc <PWM_CCU8_0_dt_config>:
100027bc:	0000000d 00000404 00000000              ............

100027c8 <PWM_CCU8_0_ch1_out0_config>:
100027c8:	000000a8 00010000                       ........

100027d0 <PWM_CCU8_0_ch1_out1_config>:
100027d0:	000000b8 00010000                       ........

100027d8 <PWM_CCU8_0_config_handle>:
100027d8:	013f0000 009f00dc 00000000 00000000     ..?.............
	...
100027f4:	100027b0 100027b4 100027b8 00000000     .'...'...'......
	...
10002810:	00000001 04000000 100027bc 00000001     .........'......
10002820:	100027a0 00000001 40040000 00000000     .'.........@....
10002830:	100027c8 00000001 40040000 00000005     .'.........@....
10002840:	100027d0 00000000 00000000 00000000     .'..............
	...
10002864:	2000057c 00000100 00010000 00000000     |.. ............

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <BCCU0_0_Veneer+0x4>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <BCCU0_0_Veneer+0x8>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <BCCU0_0_Veneer+0xc>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <BCCU0_0_Veneer+0x10>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <BCCU0_0_Veneer+0x14>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <BCCU0_0_Veneer+0x18>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <BCCU0_0_Veneer+0x1c>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <BCCU0_0_Veneer+0x20>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <BCCU0_0_Veneer+0x24>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <BCCU0_0_Veneer+0x28>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <BCCU0_0_Veneer+0x2c>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0

2000005c <MATH_Veneer>:
/* ======================================================================== */
    .globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <BCCU0_0_Veneer+0x30>)
    MOV PC,R0
2000005e:	4687      	mov	pc, r0
20000060:	00000000 	.word	0x00000000

20000064 <USIC0_0_Veneer>:
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4822      	ldr	r0, [pc, #136]	; (200000f0 <BCCU0_0_Veneer+0x34>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4822      	ldr	r0, [pc, #136]	; (200000f4 <BCCU0_0_Veneer+0x38>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4822      	ldr	r0, [pc, #136]	; (200000f8 <BCCU0_0_Veneer+0x3c>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4822      	ldr	r0, [pc, #136]	; (200000fc <BCCU0_0_Veneer+0x40>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4822      	ldr	r0, [pc, #136]	; (20000100 <BCCU0_0_Veneer+0x44>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4822      	ldr	r0, [pc, #136]	; (20000104 <BCCU0_0_Veneer+0x48>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4822      	ldr	r0, [pc, #136]	; (20000108 <BCCU0_0_Veneer+0x4c>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4822      	ldr	r0, [pc, #136]	; (2000010c <BCCU0_0_Veneer+0x50>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0

20000084 <VADC0_G0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000084:	4822      	ldr	r0, [pc, #136]	; (20000110 <BCCU0_0_Veneer+0x54>)
    MOV PC,R0
20000086:	4687      	mov	pc, r0

20000088 <VADC0_G0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000088:	4822      	ldr	r0, [pc, #136]	; (20000114 <BCCU0_0_Veneer+0x58>)
    MOV PC,R0
2000008a:	4687      	mov	pc, r0

2000008c <VADC0_G1_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
2000008c:	4822      	ldr	r0, [pc, #136]	; (20000118 <BCCU0_0_Veneer+0x5c>)
    MOV PC,R0
2000008e:	4687      	mov	pc, r0

20000090 <VADC0_G1_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
20000090:	4822      	ldr	r0, [pc, #136]	; (2000011c <BCCU0_0_Veneer+0x60>)
    MOV PC,R0
20000092:	4687      	mov	pc, r0

20000094 <CCU40_0_Veneer>:
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	4822      	ldr	r0, [pc, #136]	; (20000120 <BCCU0_0_Veneer+0x64>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	4822      	ldr	r0, [pc, #136]	; (20000124 <BCCU0_0_Veneer+0x68>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	4822      	ldr	r0, [pc, #136]	; (20000128 <BCCU0_0_Veneer+0x6c>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	4822      	ldr	r0, [pc, #136]	; (2000012c <BCCU0_0_Veneer+0x70>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0

200000a4 <CCU80_0_Veneer>:
/* ======================================================================== */
    .globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
200000a4:	4822      	ldr	r0, [pc, #136]	; (20000130 <BCCU0_0_Veneer+0x74>)
    MOV PC,R0
200000a6:	4687      	mov	pc, r0

200000a8 <CCU80_1_Veneer>:
/* ======================================================================== */
    .globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
200000a8:	4822      	ldr	r0, [pc, #136]	; (20000134 <BCCU0_0_Veneer+0x78>)
    MOV PC,R0
200000aa:	4687      	mov	pc, r0

200000ac <POSIF0_0_Veneer>:
/* ======================================================================== */
    .globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
200000ac:	4822      	ldr	r0, [pc, #136]	; (20000138 <BCCU0_0_Veneer+0x7c>)
    MOV PC,R0
200000ae:	4687      	mov	pc, r0

200000b0 <POSIF0_1_Veneer>:
/* ======================================================================== */
    .globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
200000b0:	4822      	ldr	r0, [pc, #136]	; (2000013c <BCCU0_0_Veneer+0x80>)
    MOV PC,R0
200000b2:	4687      	mov	pc, r0
	...

200000bc <BCCU0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
200000bc:	4820      	ldr	r0, [pc, #128]	; (20000140 <BCCU0_0_Veneer+0x84>)
    MOV PC,R0
200000be:	4687      	mov	pc, r0
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
200000ec:	10001099 	.word	0x10001099
    MOV PC,R0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000f0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000fc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000100:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000104:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000108:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
2000010c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000110:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000114:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
20000118:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
2000011c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000120:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000124:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000128:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
2000012c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
20000130:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
20000134:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
20000138:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
2000013c:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
20000140:	10001099 	.word	0x10001099
